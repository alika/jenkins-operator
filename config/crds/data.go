// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/crds/jenkins_v1alpha1_jenkinsinstance.yaml
// config/crds/jenkins_v1alpha1_jenkinsjob.yaml
// config/crds/jenkins_v1alpha1_jenkinsplugin.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha1_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x3f\x6f\xdc\x3e\x0c\xdd\xfd\x29\x88\x5b\x83\xf8\xf7\xbb\x66\x29\xbc\x15\xed\x92\x0e\x41\xd1\x16\xd9\x79\x32\xe3\x63\x22\x89\x2a\x45\x1b\xc9\xb7\x2f\x6c\x9f\xaf\xb9\x3f\x49\x55\xe0\xb4\x18\x7a\xe2\x23\x1f\x29\x5a\xc4\xc4\xf7\xa4\x99\x25\x36\x80\x89\xe9\xd9\x28\x8e\xbb\x5c\x3f\x7d\xcc\x35\xcb\x7f\xc3\x7a\x43\x86\xeb\xea\x89\x63\xdb\xc0\xe7\x3e\x9b\x84\xef\x94\xa5\x57\x47\x5f\xe8\x81\x23\x1b\x4b\xac\x02\x19\xb6\x68\xd8\x54\x00\x4e\x09\x47\xf0\x27\x07\xca\x86\x21\x35\x10\x7b\xef\x2b\x00\x8f\x1b\xf2\x79\xb4\x01\x70\x12\x4d\xc5\x7b\xd2\x6b\x13\xf1\x4b\xc0\x06\x56\xeb\xfa\xff\x55\x05\x10\x31\x50\x03\x8f\x14\x9f\x38\x66\x8e\xd9\x30\x3a\xca\xf5\x0e\x58\xbe\x92\x48\xd1\x44\xeb\x80\xe3\x97\xdb\xba\x63\xdb\xf6\x9b\xda\x49\xa8\x72\x22\x37\x46\xeb\x54\xfa\xb4\xf7\x55\x44\x9d\xe3\xef\xb4\xce\xc9\x7f\x9d\x69\xb7\x3b\x29\xd3\x49\xf2\xbd\xa2\x3f\x95\x59\x01\x64\x27\x89\x1a\xb8\x1b\xdd\x24\x74\xd4\x56\x00\x03\x7a\x6e\xa7\xe2\xcc\x8e\x25\x51\xfc\xf4\xed\xf6\xfe\xe6\x87\xdb\x52\xc0\x19\x04\x48\x3a\x6a\x33\x5e\xe2\x8f\xeb\xd5\x4d\xed\x31\x00\x7b\x19\x63\x64\x53\x8e\xdd\x1e\x9e\xe4\xfe\xcd\xe8\xf5\x8d\x1d\x1a\xca\xe6\x91\x9c\xed\xe1\xa5\x88\xcb\x3a\x27\x6e\x12\xd8\x06\x8e\x14\x90\xfd\x21\xfe\x46\xfc\x3d\x25\x93\x53\xb2\x72\x4e\x47\xd1\x92\xe8\x09\xe3\x41\x34\xa0\x35\xc0\xd1\x6e\x3e\x9c\xf5\xc6\xd1\xa8\x23\x3d\x38\x73\x12\x1f\xb8\x2b\x8e\x4e\x71\x38\x6f\x7b\x54\xb4\xc9\xf6\x99\x5c\x6f\xa2\xf9\x32\x4a\x39\x60\x47\xc7\xae\x12\x9a\x91\xc6\x06\xea\xab\xa6\xbe\x2a\xcd\xe2\x51\x36\x39\x0d\xae\x38\x6b\x2f\xee\x55\xd3\x16\x10\x02\x66\x23\xbd\xdc\x2d\x25\xdf\x77\x1c\x4f\x0a\xc9\x46\xe1\x04\x7c\xbb\x43\x77\xa4\xf6\x1c\xfa\x4e\x32\xf3\x1a\x4e\x7f\xbe\x42\xee\x9b\x0d\xb2\x1c\xa1\x2a\xbe\x1c\xe6\xdb\x7b\x9f\xc4\xb3\x7b\x29\x2e\xb9\x52\xf2\xec\xf0\x42\xcd\x96\x49\x07\x76\x34\x19\x94\x29\x38\xff\x76\x18\x5a\x9f\x8b\x5f\x8f\x7f\x7d\x0a\x12\x17\xdb\xa6\x2d\xe6\xd2\x54\x94\x7e\xf5\xac\x74\xd0\x27\xd7\xb3\x87\xf7\x13\x3e\x82\x96\x96\x81\x61\x8d\x3e\x6d\x71\x5d\xfd\xa9\x07\x3a\x47\xc9\xa8\xbd\x3b\x9e\x32\xab\xd5\xc1\x60\x99\xb6\x4e\x62\x3b\xcd\xd9\xbc\x1b\xa5\xbf\x03\x00\x00\xff\xff\x67\xc9\x02\xea\xb7\x07\x00\x00")

func jenkins_v1alpha1_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsinstanceYaml,
		"jenkins_v1alpha1_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha1_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsinstance.yaml", size: 1975, mode: os.FileMode(384), modTime: time.Unix(1533681410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_v1alpha1_jenkinsjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x8e\xd4\x30\x0c\xbd\xe7\x2b\xac\xb9\x53\xa8\xb8\xa0\xde\x10\x5c\xd8\xc3\x0a\x01\xda\xbb\x9b\x98\x19\xcf\x24\x71\x14\xbb\xa3\xe5\xef\x51\xda\xe9\xb0\x5d\x2d\xda\x59\x5f\xd2\xbc\x3e\xfb\x3d\x27\x31\x16\x7e\xa0\xaa\x2c\x79\x00\x2c\x4c\x8f\x46\xb9\xed\xb4\x3b\x7d\xd2\x8e\xe5\xfd\xb9\x1f\xc9\xb0\x77\x27\xce\x61\x80\x2f\x93\x9a\xa4\x1f\xa4\x32\x55\x4f\x5f\xe9\x37\x67\x36\x96\xec\x12\x19\x06\x34\x1c\x1c\x80\xaf\x84\x0d\xfc\xc5\x89\xd4\x30\x95\x01\xf2\x14\xa3\x03\x88\x38\x52\xd4\xc6\x01\xf0\x92\xad\x4a\x8c\x54\xdf\x99\x48\x5c\x05\x07\xd8\xf5\xdd\x87\x9d\x03\xc8\x98\x68\x80\x23\xe5\x13\x67\x3d\xca\xa8\xdd\xe5\x7b\x5d\xa5\x50\x45\x93\xda\x25\x6c\x2b\x87\x6e\xcf\x76\x98\xc6\xce\x4b\x72\x5a\xc8\x37\xa1\x7d\x95\xa9\x5c\xcb\xdc\x94\xba\x48\x5f\x6c\x2e\x7d\xdf\x2d\x69\x77\x32\xce\x60\x89\x53\xc5\xb8\x31\xe7\x00\xd4\x4b\xa1\x01\xee\x5b\x72\x41\x4f\xc1\x01\x9c\x31\x72\x98\x4f\x63\x29\x27\x85\xf2\xe7\xef\xdf\x1e\x3e\xfe\xf4\x07\x4a\xb8\x80\x00\xa5\x36\x47\xc6\xab\x6a\x8b\x27\x57\x73\xc5\x00\xec\x4f\xd3\x50\xab\x9c\xf7\x57\x78\x36\xf9\x1a\xe9\xe9\x15\x6d\x89\x32\x1e\xc9\xdb\x15\x5e\x8f\x6e\x8d\x97\xcc\xb5\xb8\x74\xcf\x59\x0d\xb3\xa7\xed\xcf\xff\x98\x98\xf3\x64\x0c\x1a\xdf\x42\x7f\x4c\xb7\xd2\x5f\x6e\xc8\xd0\x26\x7d\xa5\xef\x67\xd0\x79\x9d\x8a\x73\x8f\xb1\x1c\xb0\x77\xff\xaa\xa0\xf7\x54\x8c\xc2\xfd\xf3\x67\xb2\xdb\x6d\x9e\xc7\xbc\xf5\x92\xc3\x3c\x23\x7a\x19\x83\xbf\x01\x00\x00\xff\xff\x87\x7f\x22\x25\x73\x03\x00\x00")

func jenkins_v1alpha1_jenkinsjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsjobYaml,
		"jenkins_v1alpha1_jenkinsjob.yaml",
	)
}

func jenkins_v1alpha1_jenkinsjobYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsjob.yaml", size: 883, mode: os.FileMode(384), modTime: time.Unix(1533681410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_v1alpha1_jenkinspluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\x14\x31\x0c\xbd\xe7\x57\x58\x7b\x67\x60\xc4\x05\xcd\x0d\xc1\x05\x0e\x55\x05\xa8\x77\x6f\xc6\x9d\x75\x37\xb1\xa3\xc4\x59\xc1\xbf\x47\x99\x8f\xa5\xbb\x14\xda\xe6\x12\xf9\x8d\x9f\xdf\x9b\x97\x04\x13\xdf\x51\x2e\xac\x32\x00\x26\xa6\x9f\x46\xd2\xaa\xd2\x1d\x3f\x94\x8e\xf5\xed\xa9\xdf\x93\x61\xef\x8e\x2c\xe3\x00\x9f\x6a\x31\x8d\xdf\xa8\x68\xcd\x9e\x3e\xd3\x3d\x0b\x1b\xab\xb8\x48\x86\x23\x1a\x0e\x0e\xc0\x67\xc2\x06\xfe\xe0\x48\xc5\x30\xa6\x01\xa4\x86\xe0\x00\x02\xee\x29\x94\xd6\x03\xe0\x55\x2c\x6b\x08\x94\xdf\x98\x6a\xd8\x04\x07\xd8\xf5\xdd\xbb\x9d\x03\x10\x8c\x34\xc0\x03\xc9\x91\xa5\xa4\x50\x27\x96\xd2\xad\xe5\xb6\x6b\xa2\x8c\xa6\xb9\x8b\xd8\x76\x1e\xbb\x89\xed\x50\xf7\x9d\xd7\xe8\x4a\x22\xdf\xb4\xa6\xac\x35\x9d\x27\xbd\x88\xba\xa8\xaf\x4e\x97\x5f\xff\xba\xd0\x6e\x67\x23\x33\x9e\x42\xcd\x18\xae\x2d\x3a\x80\xe2\x35\xd1\x00\x37\x6d\x44\x42\x4f\xa3\x03\x38\x61\xe0\x71\x8e\x65\x19\xaa\x89\xe4\xe3\xed\x97\xbb\xf7\xdf\xfd\x81\x22\x2e\x20\x40\xca\xcd\x97\xf1\xa6\xdd\xd6\xa3\x33\x3a\x63\x00\xf6\xab\x69\x14\xcb\x2c\xd3\x19\x9e\xad\x3e\xd7\xf4\xf8\xac\x2e\x1b\x75\xff\x40\xde\xce\xf0\x16\xe0\xb6\x9e\x32\xd7\xd6\x1a\x00\x4b\x31\x14\x4f\x97\x1f\xff\x61\x62\x0d\x70\x62\xf1\x2a\xf7\x3c\xbd\x92\xc4\xe3\x2b\x09\xa7\xbf\x13\xfc\x0f\xeb\xe9\x38\x0c\xad\x96\x67\x52\xbb\x82\x36\x59\x38\xf5\x18\xd2\x01\x7b\xf7\x67\x0a\x7a\x4f\xc9\x68\xbc\xb9\xbe\x6a\xbb\xdd\xc5\xfd\x9a\x4b\xaf\x32\xce\x4f\xad\xac\xaf\xe9\x77\x00\x00\x00\xff\xff\xb2\xeb\x35\xa8\xba\x03\x00\x00")

func jenkins_v1alpha1_jenkinspluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinspluginYaml,
		"jenkins_v1alpha1_jenkinsplugin.yaml",
	)
}

func jenkins_v1alpha1_jenkinspluginYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinspluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsplugin.yaml", size: 954, mode: os.FileMode(384), modTime: time.Unix(1533681410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha1_jenkinsinstance.yaml": jenkins_v1alpha1_jenkinsinstanceYaml,
	"jenkins_v1alpha1_jenkinsjob.yaml": jenkins_v1alpha1_jenkinsjobYaml,
	"jenkins_v1alpha1_jenkinsplugin.yaml": jenkins_v1alpha1_jenkinspluginYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha1_jenkinsinstance.yaml": &bintree{jenkins_v1alpha1_jenkinsinstanceYaml, map[string]*bintree{}},
	"jenkins_v1alpha1_jenkinsjob.yaml": &bintree{jenkins_v1alpha1_jenkinsjobYaml, map[string]*bintree{}},
	"jenkins_v1alpha1_jenkinsplugin.yaml": &bintree{jenkins_v1alpha1_jenkinspluginYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

