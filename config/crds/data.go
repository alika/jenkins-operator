// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// config/crds/jenkins_v1alpha1_jenkinsinstance.yaml
// config/crds/jenkins_v1alpha1_jenkinsjob.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha1_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xdb\x3a\x0c\xbf\xfb\x53\x10\xb9\x16\xf5\x7b\x79\xbd\x3c\xf8\x56\x6c\x97\xee\x50\x14\x6b\xd1\x3b\x23\xb3\x0e\x1b\x59\xd4\x24\x3a\x6b\xbf\xfd\x60\x3b\xc9\x92\x58\x4e\x9c\xa2\x9b\x2e\x41\x48\xfe\xa8\x1f\xff\xc9\x44\xcf\xcf\x14\x22\x8b\x2b\x00\x3d\xd3\x9b\x92\x6b\xff\xc5\x7c\xf5\x7f\xcc\x59\xfe\x59\xcf\x17\xa4\x38\xcf\x56\xec\xca\x02\xbe\x34\x51\xa5\xfe\x4e\x51\x9a\x60\xe8\x2b\xbd\xb0\x63\x65\x71\x59\x4d\x8a\x25\x2a\x16\x19\x80\x09\x84\xad\xf0\x89\x6b\x8a\x8a\xb5\x2f\xc0\x35\xd6\x66\x00\x16\x17\x64\x63\x6b\x03\x60\xc4\x69\x10\x6b\x29\x5c\xab\x88\xdd\x5e\x58\xc0\x6c\x9e\xff\x3b\xcb\x00\x1c\xd6\x54\xc0\x2b\xb9\x15\xbb\xc8\x2e\x2a\x3a\x43\x31\xdf\x08\xb6\xbf\xe2\x29\xa0\x4a\xc8\x6b\x6c\x7f\xb9\xcc\x2b\xd6\x65\xb3\xc8\x8d\xd4\x59\xf4\x64\xda\xdb\xaa\x20\x8d\xdf\xf9\x9a\x04\xed\xef\xdf\x70\xed\x83\xff\xd6\xc3\xee\x36\x54\x3a\x8d\xb7\x4d\x40\x3b\xa4\x99\x01\x44\x23\x9e\x0a\xb8\x6f\xdd\x78\x34\x54\x66\x00\x6b\xb4\x5c\x76\xc9\xe9\x1d\x8b\x27\x77\xfb\x70\xf7\x7c\xf3\x68\x96\x54\x63\x2f\x04\xf0\xa1\xe5\xa6\xbc\xbd\xbf\x3d\x7b\x95\xda\xc9\x00\xf4\xbd\xbd\x23\x6a\x60\x57\xed\xc4\x1d\xdd\x73\x46\xfb\x15\x3b\x34\x94\xc5\x2b\x19\xdd\x89\xb7\x49\xdc\x9e\x14\xb9\x8e\x60\x59\xb3\xa3\x1a\xd9\x1e\xca\x47\xee\xdf\x41\x22\x99\x40\x3a\x1d\xe3\x9c\x68\x97\xc2\x98\xc6\x1c\xd1\x6f\x0f\xb9\xf5\x74\xdb\x37\x32\x8d\x4a\x18\x78\x7f\x91\x50\xa3\x16\xc0\x4e\x6f\xfe\x4b\x7a\x63\xa7\x54\x51\x38\xd0\x71\x8d\x15\x1d\xbb\xf2\xa8\x4a\xc1\x15\x90\x5f\x15\xf9\xd5\xd4\xc8\xd9\x55\x81\xe2\x80\xd7\x58\x3d\xce\x24\xeb\x64\x12\x36\x24\x97\xe3\xa0\x04\xbf\xf6\x44\x0a\x6b\x36\x83\x80\xcf\xe2\xd4\xc6\x74\x1f\x9c\x41\x8e\x46\x60\xc5\xec\xcd\xd9\x04\x5f\x8e\xf4\xa7\x84\x95\x17\xcb\xe6\x3d\x8d\x5a\x88\x58\x42\x77\xa0\xf3\xb6\xa9\xd8\x19\x71\x2f\x5c\x5d\x52\x99\x34\xe2\x6c\x9e\x7a\xd8\xe7\xa6\xaa\x0f\x61\xc0\x91\x95\xea\x04\xf1\x53\x41\x01\x70\x99\x92\x9e\x09\x0a\x60\x3d\x7c\xd9\x26\x62\x4f\xb4\x70\xaf\xc2\x10\xf0\xfd\x40\x13\x16\x68\x2e\x2a\x95\x6d\xa2\x52\x08\x62\x2f\xed\xeb\x51\x72\x23\x63\xf2\xa7\x46\xb9\xfb\x94\x7e\x70\x94\x3b\x9b\xcf\x0d\x1b\x8d\x91\xc6\x0d\xfa\xf7\x64\xf4\x8d\x4a\xdd\x82\x1e\x7b\x17\xb7\xbd\x8b\x27\x59\x51\xb2\x6b\xc6\x07\x16\xb6\x8f\xf2\x43\x63\xed\x63\x37\x48\xe9\x4e\x4e\xb7\xff\xc9\xf8\xf6\xd5\xc3\xbe\x83\x8f\x57\xe2\xaf\xb2\x1c\x2f\x9f\x4a\x48\x7d\xcd\x4e\xd4\xed\x55\x16\xd1\xaf\x07\xe3\x76\x36\xe4\x0d\xee\x78\xf7\x98\x10\xdb\x88\x2a\xbd\xda\x28\x6a\x13\x27\x2f\x37\x97\x6e\x2a\x9e\x27\xdb\xfa\x25\xc6\x41\x62\x47\xac\x03\xfd\x68\x38\xd0\xc1\x4b\x7b\xdd\x7b\x38\x1d\xf0\x91\x68\xfb\xe8\xc2\x7a\x8e\xd6\x2f\x71\x9e\xfd\xce\x07\x1a\x43\x5e\xa9\xbc\x3f\x5e\x82\x67\xb3\x83\xbd\xb7\xfb\x6b\xc4\x95\xdc\xbf\x4c\xfd\xa6\xff\x2b\x00\x00\xff\xff\x42\xbc\x2b\xf0\x56\x0c\x00\x00")

func jenkins_v1alpha1_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsinstanceYaml,
		"jenkins_v1alpha1_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha1_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsinstance.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_v1alpha1_jenkinsjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x8c\x7a\x44\x6a\xa0\xe2\x82\x72\x43\x70\x61\x0f\xab\x15\xac\xf6\x82\x16\x69\xe2\x0c\xad\x5b\xc7\x63\x3c\x93\xd0\x45\xfd\xf1\x28\x71\x53\xb6\x69\xb6\x44\x9b\x43\x62\xbf\xf9\x78\x2f\x9e\xf1\x60\xb0\x0f\x14\xc5\xb2\x2f\x00\x83\xa5\xbd\x92\xef\x76\x92\xef\x3e\x48\x6e\xf9\x6d\xbb\x2a\x49\x71\x95\xed\xac\xaf\x0a\xf8\xd4\x88\x72\xfd\x95\x84\x9b\x68\xe8\x33\xfd\xb4\xde\xaa\x65\x9f\xd5\xa4\x58\xa1\x62\x91\x01\x98\x48\xd8\x81\xf7\xb6\x26\x51\xac\x43\x01\xbe\x71\x2e\x03\x70\x58\x92\x93\xce\x07\xc0\xb0\xd7\xc8\xce\x51\x5c\x2a\xb3\x1b\x08\x0b\x58\xac\xf2\x77\x8b\x0c\xc0\x63\x4d\x05\x6c\xc9\xef\xac\x97\x2d\x97\x92\x1f\xd7\xc3\x97\x03\x45\x54\x8e\x79\x8d\xdd\xd7\x56\xf9\xda\xea\xa6\x29\x73\xc3\x75\x26\x81\x4c\x47\xb4\x8e\xdc\x84\x53\x9a\x59\xa1\x89\xfa\x28\x33\xfd\xf7\x4d\x0a\xbb\xe1\xb2\x07\x83\x6b\x22\xba\x33\x71\x19\x80\x18\x0e\x54\xc0\x6d\x17\x1c\xd0\x50\x95\x01\xb4\xe8\x6c\xd5\x9f\x46\x4a\xc7\x81\xfc\xc7\xbb\x2f\x0f\xef\xbf\x99\x0d\xd5\x98\x40\x80\x10\x3b\x45\x6a\x07\xd6\xee\x79\x56\x9a\x13\x06\xa0\x4f\x1d\x87\x68\xb4\x7e\x7d\x82\x7b\x91\xff\x73\x7a\x5e\xa2\x73\x47\x2e\xb7\x64\xf4\x04\x0f\x47\x37\x3c\x53\xe2\xfa\x0a\x46\xaa\xc8\xab\x45\x37\x32\x00\x58\xa5\xfa\x02\x7c\x39\xd3\x38\xdf\x94\x15\x20\xa0\x2a\x45\x5f\xc0\x8f\xef\xb8\xfc\xf3\xd8\xbd\x96\x8f\x6f\xfa\xf5\xa4\xff\xe4\x29\x4c\xd1\xf5\x8e\xd7\x29\x1b\xa1\xd8\x75\xc5\x1d\x8a\xfc\xe6\x58\x1d\x84\x4c\x24\xbd\xa7\xbd\x1e\x84\x62\x6b\x0d\xa1\x31\xdc\x78\x3d\xb4\xd8\x38\x4d\xed\x94\xd6\x18\x42\x64\x47\x69\xa3\xbc\x23\xff\x1a\xb9\x89\x70\x5a\xe6\xac\xd0\x71\xed\xc7\xe1\xa3\x2e\x98\x61\x4c\x26\x8c\x11\x9f\xce\x2c\xc7\x6b\x61\xbd\x28\x7a\x73\x71\xb4\x2f\xaa\xdd\x72\x59\xc9\x45\xf1\xaf\xb9\xef\xeb\xb9\xee\xd3\x9d\xae\xa8\x8d\xcc\xe9\xf5\xb0\x41\x99\xfb\x23\x91\x7e\x35\x36\xd2\xd9\x8d\x5c\xa6\x0c\xd7\x05\x8d\xa0\x76\x18\xcc\xed\x0a\x5d\xd8\xe0\x2a\xfb\xa7\x17\x8d\xa1\xa0\x54\xdd\x8e\x27\xd5\x62\x71\x36\xa1\xfa\xad\x61\x5f\xf5\x63\x5a\x8e\x93\xf8\x6f\x00\x00\x00\xff\xff\x49\x39\x58\xde\xf6\x05\x00\x00")

func jenkins_v1alpha1_jenkinsjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsjobYaml,
		"jenkins_v1alpha1_jenkinsjob.yaml",
	)
}

func jenkins_v1alpha1_jenkinsjobYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsjob.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha1_jenkinsinstance.yaml": jenkins_v1alpha1_jenkinsinstanceYaml,
	"jenkins_v1alpha1_jenkinsjob.yaml": jenkins_v1alpha1_jenkinsjobYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha1_jenkinsinstance.yaml": &bintree{jenkins_v1alpha1_jenkinsinstanceYaml, map[string]*bintree{}},
	"jenkins_v1alpha1_jenkinsjob.yaml": &bintree{jenkins_v1alpha1_jenkinsjobYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

