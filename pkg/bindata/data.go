// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/bindata/.DS_Store
// pkg/bindata/environment/jenkins-jvm-environment
// pkg/bindata/environment/required-plugins
// pkg/bindata/init-groovy/0-jenkins-config.groovy
// pkg/bindata/jobdsl/seed-job-dsl
// pkg/bindata/plugin-scripts/install_plugin.sh
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6c\x14\x45\x18\xff\xbe\xa3\xd0\x99\x14\xe8\x94\x7f\x6d\xef\x10\x4f\xca\xdf\x70\xc5\x6b\x0b\x6d\x81\x82\xed\xb5\xfc\xa9\xc5\x40\xb8\x96\x96\x02\x96\xbd\xdd\xa1\x9d\xb8\xb7\x7b\xdc\xee\xdd\x95\x96\x1a\x8c\xfa\x60\x22\x7f\x5f\x0c\xa0\x89\x31\xbe\x18\x88\x0f\x26\x48\x62\x7c\xf1\x45\x51\x4c\x08\x49\x23\xc8\x83\x0f\xfa\x62\x7c\x22\x1a\x4d\x7c\xd2\xec\xee\x1c\xb4\xb5\x77\x7d\x30\x84\x8a\xfb\x4b\x2e\xbf\x9d\x6f\xbe\x99\xd9\x99\xf9\xcd\x7c\x3b\x99\x03\x00\x8c\x65\xb4\x3a\x80\x30\x00\x10\xf0\x98\xcd\x87\x69\x41\xe4\xef\x1f\x08\x48\xae\x70\xea\x03\x60\x00\xb5\x30\x08\x69\x30\xc1\x84\xec\xf4\x75\xf9\xf0\xe1\xc3\x87\x0f\x1f\x3e\x9e\x30\xd0\x23\x52\xf6\xa4\x5f\xc4\x87\x0f\x1f\xb3\x0e\x28\x0f\x06\x0e\xb7\x4a\x3e\xed\x31\xca\xfc\x80\xe4\x92\x09\x65\x98\xe4\xb0\xe4\x56\xc9\xa7\x3d\x46\xe9\x17\x90\x5c\x22\x99\x48\x66\x92\xc3\x92\x5b\x25\x9f\xf6\x58\x6e\x5a\x28\x0f\x1f\x28\x5b\x46\x79\x42\x41\x26\x39\x2c\xb9\xf5\xf1\x8c\x8d\x0f\x1f\x4f\x03\x9c\xb3\x7b\x19\x08\x30\x40\x80\x3d\xe9\xfc\x7e\x32\x91\xb3\x52\x09\xdd\x4c\x00\xc0\xd7\x89\x94\x2e\x2c\x3b\x1a\xbd\x8b\x81\x39\x25\x73\xe7\x95\x12\x42\xca\xc8\x02\x72\x34\x3e\x64\xe6\xe2\xb6\x62\x67\xac\x98\x92\x3e\xec\xa4\xf6\x2b\xf6\x50\x42\x3e\x77\x9b\xa6\xfe\xf0\x59\x49\x1c\x14\x3c\x37\xc0\x96\xb4\x9b\x86\xad\x08\x83\xa7\xdd\xc2\x42\xe3\x09\x25\x7d\xa4\x57\x18\x9a\x99\x8b\x99\x19\x43\xb3\x0e\x4f\xc8\xa0\x94\x12\x3a\xc0\xaa\x46\x47\x9b\xa3\x9b\x22\xe1\xcd\x9b\xb6\x8c\x45\xc2\xa3\x4d\x4d\xd1\x48\x78\x53\x43\xe3\xd8\x18\x25\x95\xab\xeb\xb6\x77\x1e\x4b\x9e\x1c\x19\x3d\x35\xf6\xea\x25\xaf\x57\xf9\x5d\x02\xca\xa7\x74\xf7\x72\xe1\xee\x6a\x96\xaa\x27\x4c\x53\xc7\xc2\x2e\xfa\x60\x5d\x5c\x35\x93\x29\xaf\xae\xd2\x96\x22\x9e\x56\xb6\xdd\x1b\xbb\xc0\xc5\xfc\xd8\xdd\xcb\x8f\x1d\xa5\x74\xfe\x9e\xce\x17\xbb\x06\x18\xcb\x58\xfc\x00\xd7\x15\x5b\x64\x79\x87\x62\x73\x6b\x80\x95\x5b\x43\x66\xae\x53\x35\x8d\xfd\x69\x9e\x75\x07\xac\x42\x55\x74\x35\xa3\x2b\x36\x6f\xd3\xf5\xb8\x18\xe1\x56\xaf\x6a\xea\x99\xa4\x61\xf5\xd9\x7c\xd8\x76\x2c\xfd\x96\x99\xb6\xdb\x5d\x63\x9f\x50\x4d\xc3\xb1\x0d\xb0\x45\x4e\xf9\x7d\x29\x5b\x98\x86\x75\x90\xa7\x2d\x61\x1a\x94\xd2\xab\x0b\x96\xad\xa8\x59\x1b\xa9\x6b\xdc\xf6\x42\xc7\xf8\xc2\x72\x56\x41\x17\xd3\xa5\xbd\x59\x61\x89\x84\xce\x7b\x72\x42\xb3\x87\x0e\x29\x96\xca\x0d\x4d\x18\x83\xfd\x42\xe3\x86\x2d\x8e\x0b\x9e\xa6\x15\x18\xa1\xdd\x86\x92\xe4\xe3\x95\x55\xd5\x15\xc1\x50\xf0\x99\x42\xa5\x08\xab\x21\x7d\x99\x84\x38\x91\x11\xf6\x49\xaf\x8d\x70\x70\x25\x65\xd7\xc9\x11\x4d\xb1\xf9\x4b\xa6\xe6\xd4\xa8\xb9\x39\xc1\x70\x70\x0d\x21\x87\x1d\x7b\x7b\x9a\x2b\x36\xd7\xc6\x2b\xca\xd9\xc2\x75\xeb\x83\xb4\xdb\x12\x23\x9c\x29\x84\xba\x96\xda\x8d\x94\x76\xbf\x22\x0c\x8d\x59\xd4\xb3\xd4\x37\xd0\x60\x8f\xae\x24\xb8\xce\x34\x4a\x5c\x53\x53\x33\x0d\xf6\x66\xbd\xbe\xb2\x2e\x69\x6c\x59\x4c\x83\x7d\xaa\x99\x4c\x72\xc3\xb6\x28\xf1\x9a\x6d\x0b\xb6\x13\x76\x93\xbc\xec\x34\xbc\x57\xb1\xec\x7d\x29\x6e\x3c\x7a\xa5\xdd\x84\x1c\x72\x72\xda\x34\x8d\x6b\x35\xad\xeb\xbc\x19\x77\x7b\x5f\xd3\x1a\xf5\x52\xcc\x89\x59\xd5\x10\x81\x1d\x70\x00\xfa\x41\x05\x03\x72\xf0\x36\x9c\x81\xb3\x70\x0e\xae\xc0\x87\x70\x0d\x3e\x81\xcf\xe1\x2b\xb8\x09\xb7\xe0\x5b\xb8\x03\xf7\xe1\x47\xf8\x19\x7e\x85\xdf\xe0\x77\xf8\x03\xfe\x42\x82\x14\xcb\x70\x3e\x56\xe3\x4a\xac\xc1\x55\x18\xc5\x2d\xb8\x03\x5b\xb1\x0d\x63\xd8\x85\xfb\xf1\x00\xc6\xb1\x1b\x8f\xa2\x8a\x1c\x8f\xe3\x20\xa6\x70\x18\x47\x70\x14\x4f\xe1\x9b\x78\x16\xcf\xe1\x79\xbc\x84\x97\xf1\x5d\x7c\x0f\xaf\xe1\x75\xfc\x14\x6f\xe0\x17\xf8\x0d\xde\xc6\x7b\xde\xfb\x05\xf2\x8b\x60\xef\xe4\x35\x80\xf7\x8b\xea\x56\xae\xf9\xc0\xa1\x69\x75\xbb\x73\xd7\xee\xd8\x93\xd1\xed\xf7\x0b\x9c\xb9\x59\xb4\x78\xc9\xd2\x65\xcf\xae\x5a\xbf\xb1\xa1\x79\x7b\xdb\xc3\x49\x9d\x32\x8b\x13\xd5\xe4\x8a\xc8\x53\x89\xab\x9e\xbc\x3a\xdc\xb9\x9c\x2c\xc7\xca\xaa\xea\x60\x68\x39\x5d\x51\x48\xd6\x3d\xc2\xd0\xf8\x30\x71\xd6\x01\x2b\x1d\x0f\x56\x55\x57\x86\x9f\x0b\x85\x98\x23\x23\xe2\x26\x57\xaf\x09\x85\x58\x80\x5d\x27\xc4\xad\x8b\x6e\x08\xd5\x52\xa6\x10\x36\xc7\xab\x3a\x4a\xeb\x09\xd3\x28\x9b\xeb\xe5\x6e\xa6\x4d\x94\x59\x94\x95\x78\xb9\x5b\x69\x0b\x61\x5d\x94\xcd\x73\xab\xda\xb1\x9c\x52\x06\x94\xba\x89\xd8\x9a\x10\x65\x48\x68\x01\x21\x16\x91\xe1\x07\x70\x15\x3e\x83\x2f\xe1\x16\xdc\x81\xef\xe0\x07\xf8\x09\x1e\xc0\x9f\x88\x58\x8a\x15\x58\x89\x55\x18\xc2\xe5\xb8\x02\xd7\xe2\x7a\xdc\x80\x11\xac\xc5\x46\x6c\xc6\xad\xb8\x0d\x5b\x70\x27\xee\xc2\x3d\xd8\x89\x5d\xd8\x8d\x3d\xd8\x8b\x7d\xd8\x8f\x2a\x6a\xae\x10\x05\xa6\xd1\xc2\x0c\x66\x71\x18\x5f\xc3\xd7\xf1\x0d\x57\x90\xe7\xf1\x02\x5e\xc4\x2b\xf8\xfe\x14\xf9\xed\x99\x22\xbf\x8f\x0a\xcb\x2f\x69\x76\x74\x68\x19\x5b\x05\xb8\x9b\x3c\xf1\xcb\xc1\x0b\xc5\x3c\xb5\xbc\x27\x3f\x7a\xe3\xee\xf3\x85\x3d\x53\x43\x13\x37\x6d\xf7\xf3\xb0\x80\x67\x36\x9e\x36\x74\xd3\x18\x94\x9f\xba\x0b\x21\x05\x3a\x64\x60\xd0\xf5\xae\x05\x0b\x54\x48\x83\x80\x14\xd8\x60\xcd\xb2\xe0\xd8\x50\xdf\x14\x09\xd7\x37\x36\xfc\xeb\xe0\x58\xb4\xd3\x93\xe3\xdf\xdc\xdb\x33\xfa\xfb\x51\xd0\x8f\x82\xb3\x39\x0a\xce\xa4\x5e\x3f\x16\xfa\xb1\xf0\xb1\xc7\xc2\xa2\x22\x9c\x18\x11\xbb\xe6\x3d\x38\x33\xb3\xff\xc3\xb8\xa8\x47\x3e\x7e\xe7\xad\x99\xfc\xa7\x89\x8e\x45\xfd\xa7\xc4\x48\x1f\xff\x61\xcc\xf1\x28\x5c\x06\x00\x3b\x0b\xdf\xff\xfb\xf0\xe1\xe3\x29\x06\x96\x74\xc4\x3b\x62\x45\x76\xf4\x80\xbc\x08\x38\x96\x2f\x30\xc3\x45\x40\xc0\xfb\xc3\xd0\x3a\x69\x8b\xc2\xa3\x72\xb3\xe3\x32\xc0\xff\xe6\xf1\xcf\xff\xff\xf3\xf3\xff\xdf\x01\x00\x00\xff\xff\x3b\x27\x23\x89\x04\x28\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 10244, mode: os.FileMode(420), modTime: time.Unix(1531431221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _environmentJenkinsJvmEnvironment = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\x0c\x73\x8c\xf7\x0f\x08\x09\xb6\xd2\x8d\xc8\x2d\x36\x34\x30\x32\xc9\x55\xd0\x8d\xc8\xad\x80\xb2\x5c\xb2\x52\xf3\xb2\x33\xf3\x8a\xf5\x32\xf3\x8a\x4b\x12\x73\x72\xf4\x8a\x4a\xf3\x82\x53\x4b\x4a\x0b\xc2\x33\xab\x12\x8b\x52\x6c\xd3\x12\x73\x8a\x53\x91\x94\x39\xfb\x78\xea\xa5\x64\x16\x27\x26\xe5\xa4\xa6\xd8\x96\x14\x95\xa6\x72\x79\xb9\xfa\x79\x7b\xfa\x05\x43\xed\xd0\x4d\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\x0e\x4a\x4d\xcc\xc9\xd5\x2b\x48\x2c\x2e\x2e\x4f\xd1\x53\xd1\x70\x74\xf1\xf5\xf4\x8b\x0f\x0d\x76\x0d\xd2\xb4\x85\xf1\x02\x1c\x83\x83\xc3\xfd\x83\x5c\x34\x15\x30\xf4\x15\xe5\xe7\xa4\x16\xe3\xd0\x06\xe6\x01\x02\x00\x00\xff\xff\xca\x81\xb8\xf8\xd8\x00\x00\x00")

func environmentJenkinsJvmEnvironmentBytes() ([]byte, error) {
	return bindataRead(
		_environmentJenkinsJvmEnvironment,
		"environment/jenkins-jvm-environment",
	)
}

func environmentJenkinsJvmEnvironment() (*asset, error) {
	bytes, err := environmentJenkinsJvmEnvironmentBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "environment/jenkins-jvm-environment", size: 216, mode: os.FileMode(420), modTime: time.Unix(1532036458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _environmentRequiredPlugins = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\xc1\x0d\x03\x21\x0c\x44\xd1\x7b\x7a\x71\x03\xe9\xc6\xc0\x84\xb0\x58\x78\x35\x18\xad\x94\xea\x73\xf2\xf1\xeb\x1d\x7e\x25\x1a\x56\x0c\xb5\xfd\x36\x0d\xec\x78\x95\x33\xac\x49\x31\xaf\x13\x94\xdb\x4e\x1f\x2b\xed\xf2\x22\x6d\x5b\xa6\x9e\xf8\x3a\xc7\x0f\x72\xd3\x2f\xd4\x48\x78\x9c\xf3\x63\xfe\x88\xf6\x4e\x74\x0d\x67\xd2\x3c\x05\x5c\x08\xe4\xf0\x1f\x00\x00\xff\xff\xc2\xc9\xda\x4d\x83\x00\x00\x00")

func environmentRequiredPluginsBytes() ([]byte, error) {
	return bindataRead(
		_environmentRequiredPlugins,
		"environment/required-plugins",
	)
}

func environmentRequiredPlugins() (*asset, error) {
	bytes, err := environmentRequiredPluginsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "environment/required-plugins", size: 131, mode: os.FileMode(420), modTime: time.Unix(1532377175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGroovy0JenkinsConfigGroovy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xb0\xee\xc1\x52\x11\x33\x40\xd1\x53\xdb\x2c\x60\x64\xb7\x6d\x52\xef\xd6\x8d\xbb\xe8\x61\xb1\x28\x68\x6a\x2c\xd3\xa5\x38\xc6\xcc\xd0\xd9\x34\xf0\x7f\x2f\x44\xc9\xb6\x94\x38\x41\x7b\x48\x00\x52\x8f\x6f\x3e\xde\xbc\xf1\xd7\x5f\x55\x84\xb8\x7b\xc8\x32\x57\x6f\x91\x44\x6d\x20\xfc\xed\x02\xeb\x1a\x4b\xf0\xfa\x9b\xc3\xf5\x3a\x96\x8c\x41\x33\xd8\x48\x4e\x1e\x4e\x1f\x86\xf8\xdb\xf6\x34\x43\x6b\xc4\x61\xb8\xc6\xb0\x72\x55\xa4\x74\x78\x89\xca\x32\xad\xf4\x5b\x58\x99\xe8\xe5\x9a\x62\xbd\xbc\x61\x8e\x40\x4f\x03\x1c\xf1\xfc\x6d\x7d\x0a\x8f\x54\xe9\x0e\x61\x9d\xde\xfa\x58\x35\x58\x13\x65\x8d\xe4\xfe\x81\x2d\xe1\x06\xac\xfc\x6f\x3c\x0b\x19\x81\xea\x4c\x9d\xc7\x34\x7e\x8f\x10\xe1\x46\xa0\x9e\x46\x59\x43\x10\x67\x8d\x20\x9d\xad\x78\x63\x76\x66\x8b\xcc\xa0\x37\xb8\x2c\xd9\xeb\xe6\xef\x2d\xfb\x85\x25\xb7\x95\x19\x9a\xb2\x57\xee\x53\x6c\x9b\xe3\xa1\xb3\xb7\xb8\x7c\x6f\x82\xa9\xa0\x86\x20\x59\x56\xc2\x4a\xb9\xc0\x62\x82\x05\x75\xa5\x3a\x90\xae\x40\x6e\xba\xdb\xbc\xc8\xb6\xe4\x82\xf8\xa0\x46\x93\xc9\x1b\x65\x09\x8c\xb8\x50\x29\x8f\xd6\x78\x15\x19\x48\x8d\x1f\x1f\xf5\x47\x06\xda\xef\xc7\xa3\x96\xb3\xd5\xe8\x0e\x8c\xaf\xd5\x95\x0a\x70\xaf\x7e\x49\x37\x73\x72\x3b\x23\xb0\xe8\x9a\x90\x00\xf9\xca\x78\x86\x22\xeb\xbd\xd1\x29\x0a\x4c\xad\xc5\x18\x24\xef\xf1\x5f\xa4\x60\x73\xc3\x7c\x8f\x54\xee\xf7\xe3\x22\x3b\xe4\xaf\x19\x64\x48\xdc\x63\x2c\xda\xbc\x0e\xba\x74\x49\xfd\x14\xbd\xbf\xc6\x20\x84\xfe\xb7\x60\x61\x86\x55\x05\xe5\x4d\x98\x76\x72\x26\x11\x16\xdd\x93\xbc\xc8\x8e\xaa\x32\xc8\xd4\x7b\xbc\x9f\x06\x0c\x0f\x35\x46\xbe\x03\x53\x1e\xea\xe8\xe7\x73\x9e\xe9\xc0\x53\x64\xc3\xde\x32\x48\x6a\x6d\x37\x2b\x2a\x92\x6f\x7b\x4b\xbe\x6d\xed\x66\x68\x8f\x93\x62\x67\x0d\xd3\xc8\x98\x17\x4f\x1f\x35\x69\x7d\x24\x9f\x9f\x88\xcf\x42\xa6\x65\xed\xc2\xb4\x2c\x09\x98\x13\x36\x5d\xbc\xab\x8d\x7b\xe1\x89\xd9\x35\xb3\x72\xbe\xa0\xb8\x55\x65\x6b\x50\x65\x1b\x87\xb2\x72\xc9\xa3\xa3\x41\xb3\x7a\xe6\xcd\x1b\x75\x9e\x7b\x3a\x17\x8a\x50\xbc\x12\xe5\xf6\xc3\x6c\x3e\xca\x16\x20\x3f\x2e\x84\x5c\xa8\xde\x28\x53\x41\x90\x39\xa1\xa0\x45\xcf\x33\xc7\xa2\xae\xd4\xa7\x71\x03\xfc\x6e\x62\x31\x04\xb0\xd2\x4c\xd5\xdc\x85\x6a\xfc\x79\x28\xde\xe0\x69\xfe\x9c\xe9\xc9\xec\x79\xb3\x83\xf6\x0d\x92\xe4\x8f\x8f\x4a\x1f\x4f\x6a\xbf\x1f\x82\x3f\xc4\xfa\xdd\x17\xb0\x51\x90\x38\x41\x8f\xa7\x04\x1d\x16\x08\xc1\x2c\x3d\xa8\xc4\xa6\x04\x55\x6d\x58\x80\xd4\x61\x95\x28\x8e\x4b\x7e\x60\x81\xba\xd7\x4f\x17\x9a\x45\x84\x34\xf0\x72\xd2\xf0\xcf\xb5\x13\xf0\x8e\xe5\x2e\x7a\xd0\xd6\x1b\xe6\xa2\x49\xe9\x7d\x62\xfd\xd5\x79\xbf\xb8\x77\x62\xd7\xdd\x3c\xff\xf0\x72\xb7\xbb\x6d\xa7\x4c\x7f\xca\x47\xd9\x7f\xd8\x6c\xed\x68\x36\xff\x07\x18\xce\x0b\x6d\xca\x32\xa9\xff\xb3\xc7\xa5\xf1\xe7\xb9\x12\xe0\x0f\x72\x55\x05\x8d\xca\xcd\x6e\xe0\x17\x4c\xfb\xda\xb4\x30\x40\xa9\x36\xb8\x1c\x65\x69\xdc\x86\x0b\x35\xc5\x38\xb7\x35\xf3\x45\xea\xb5\xc6\x28\x17\xea\xd3\xf7\x9f\x2f\xda\x55\xe2\x3c\xe4\x63\x3d\x2e\x8a\x42\x53\x0c\x2d\x53\x7e\xfa\x72\xb9\x33\x74\xd9\x99\xe6\xaf\x35\xd6\x70\xe9\x82\x13\xdd\xfe\x7a\xea\xf2\xb2\xc9\x65\xb2\xc1\xe5\xa4\x64\x3f\x2e\xb4\xc0\x17\x79\x96\xb9\xd9\x35\x89\x1f\x24\xee\x9b\xa7\x33\x5f\x96\xfd\x1b\x00\x00\xff\xff\x83\x27\xe3\xa0\x90\x07\x00\x00")

func initGroovy0JenkinsConfigGroovyBytes() ([]byte, error) {
	return bindataRead(
		_initGroovy0JenkinsConfigGroovy,
		"init-groovy/0-jenkins-config.groovy",
	)
}

func initGroovy0JenkinsConfigGroovy() (*asset, error) {
	bytes, err := initGroovy0JenkinsConfigGroovyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init-groovy/0-jenkins-config.groovy", size: 1936, mode: os.FileMode(420), modTime: time.Unix(1532381258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jobdslSeedJobDsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xd1\x6a\xf3\x30\x0c\x85\xef\xfb\x14\xba\xf8\x41\xee\x4f\xbb\x47\x18\xb4\x2b\x1b\x14\xb3\x6e\xe4\x09\x9c\xe4\x6c\x49\xea\xda\xc1\x72\xb6\x96\x92\x77\x1f\x4e\xd6\x34\x30\x83\x11\xe8\x1c\x1d\x7d\xe8\x23\x00\x59\xbc\x58\xec\x7d\xae\xb8\x08\x30\x11\xeb\x06\xee\x58\x3b\x59\x37\x3e\x17\x5e\xd2\x75\x41\x44\x94\x5b\x5f\x1c\x0f\x4e\xf1\xff\xa9\x35\xb5\x35\xbe\x60\x15\xbf\xe8\xc3\x76\xa3\x79\x39\x89\x52\x18\xf7\xde\xa1\xc3\xb3\x0f\x8a\x37\xfa\xa6\xf5\x8b\xa1\x94\x90\x22\xd4\x6d\xac\xbd\x53\xbc\xf7\xf9\x2e\xd3\xd4\xf8\x7c\x45\xb1\x32\x91\x46\x18\x21\x1f\x2b\x04\x1a\x59\xc6\xb1\x5a\x5a\x6b\x2e\xaf\xe6\x04\xc5\x4f\x83\x8b\x1c\xbe\x6f\x96\xc1\xd3\x9a\x60\x4e\x88\x08\x32\x63\x8d\x38\xc7\xb7\x24\x28\xde\x1f\xb6\xbb\x4c\xf3\x8a\x38\xfd\xb4\x5b\x2c\xb5\xb6\xfb\xac\x1d\x95\x62\x07\xeb\x1d\x76\xa8\x12\xd1\xce\xd3\xa4\x82\xb5\x8a\x51\x54\x9e\xfe\x5d\xc7\xc0\x9e\x1e\x13\xc6\x43\x29\x76\x76\x86\x14\x78\x9f\x4b\x0f\xe7\x88\xe0\x8c\x55\xfc\xd7\xdd\xff\x6e\xed\x7f\x02\x00\x00\xff\xff\xd2\x79\x40\xd9\x9c\x01\x00\x00")

func jobdslSeedJobDslBytes() ([]byte, error) {
	return bindataRead(
		_jobdslSeedJobDsl,
		"jobdsl/seed-job-dsl",
	)
}

func jobdslSeedJobDsl() (*asset, error) {
	bytes, err := jobdslSeedJobDslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jobdsl/seed-job-dsl", size: 412, mode: os.FileMode(420), modTime: time.Unix(1532384084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginScriptsInstall_pluginSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x4f\xdb\x30\x10\x7e\xc6\xbf\xe2\x30\x48\x05\x89\xd4\x68\x7b\x2b\xa5\xdb\x54\x01\xea\xc6\x56\x54\xaa\x81\x34\xed\xc1\x4d\x2e\x89\x87\x6b\x67\xb6\x53\x8a\x58\xfe\xfb\x64\x3b\x55\x19\x42\xdb\x32\x2d\x2f\x71\xec\xf3\x77\xdf\x7d\x77\x5f\xf6\x76\x59\x6d\x0d\x5b\x08\xc5\x50\xad\x60\xc1\x6d\x49\x2a\x23\x94\x43\xb5\x22\x64\x0f\x6e\xb8\x70\x90\x6b\x03\xef\x51\xdd\x09\x65\xc1\x69\x90\x9a\x67\xe4\xbe\x14\x12\x61\x17\xd2\xda\x48\x48\x2c\x24\x49\x89\x3c\x83\x24\x31\xf8\xbd\x46\xeb\xe0\xe2\x6c\x0e\x8f\x8f\xd0\x7f\x57\x09\x68\x1a\xf8\x01\x85\xc1\x0a\xe8\xab\xe3\x63\x98\x7e\xa0\x30\x02\x96\xe1\x8a\xa9\x5a\xca\x13\x92\x69\xb2\x83\x69\xa9\x81\x8e\x2f\x27\x83\x90\x54\xa8\x22\xe4\xfd\x16\xf3\xf6\xfb\x94\xec\x58\x89\x58\xc1\x6b\x92\x69\x85\x9e\x5c\x81\x0e\xc6\xd7\xb3\x73\xa8\x8c\x76\x98\x3a\xa1\x15\x38\x7d\x87\x8a\x44\xb0\x0b\x74\x01\xe7\xc5\x18\x4a\x52\x53\x2f\x17\x73\xbf\x3e\xdd\x3f\x08\x75\xf4\xb6\x84\xc3\xe1\xc4\xda\x1a\x0d\xe3\x95\x60\xeb\xa5\x7c\xb3\xae\xb8\x2b\x4f\x53\xad\x52\xee\x0e\x18\x0b\x21\xb3\x58\xee\xb9\x40\x99\x1d\xd1\x01\x3d\x6a\xf7\x0f\x7b\x87\xa4\xa5\x31\x51\xd6\x71\x29\x3d\x93\x4a\xd6\x85\x50\x41\x97\xab\xb0\x9c\x64\xd0\x34\x6f\xb7\xdf\x9f\xd1\x58\x4f\xb1\x69\x28\x89\xd2\xde\xc2\xd5\xf4\x7a\x0e\x49\x06\xbd\x61\x2b\xc6\x68\x28\x22\x64\x8b\x77\x4a\xff\x0a\x10\xd8\x68\xc8\x36\x10\xbd\xb6\x63\x68\xa0\x37\xd6\xbe\xdf\x2e\x99\x3f\x54\x38\x00\x87\x6b\xe7\xcb\x7d\x12\x41\x6f\x13\xaf\x61\x12\xc4\x1a\xc0\xfe\x56\x39\xfa\xa4\xc7\x91\xcc\x47\xae\x78\x81\x86\xb5\x14\x3f\x61\x8a\xd6\x72\xf3\x10\xe9\xd8\x67\x55\x75\xcb\xc0\x2c\xcf\x71\x86\xd6\x71\xe3\xfc\x00\xdc\x1b\xe1\x70\x23\x6a\xaa\x55\x2e\x0a\x3f\xa0\xb9\x90\x48\x52\xee\x60\xc4\xdc\xb2\x62\xcf\xc4\xe9\xbf\x24\x4e\xbf\xbd\x3d\x1c\x9e\x4d\x2f\xc9\x36\x62\x1c\xb7\x9b\x86\xf8\xfd\xb6\xa1\x37\x7e\x94\x7c\xa2\xae\xf0\x03\x1a\x68\x75\xbd\x46\x88\xc8\xe1\x8b\x77\x59\xe7\x7a\xbe\x9e\x80\x2b\x51\x11\x02\x00\xf0\x1b\x3b\xfb\xe3\xff\x6a\x69\x0f\x98\xe9\xf0\xf2\xcf\x9f\xdd\xbd\x89\xdc\x98\x3c\x02\x78\xa3\x47\xea\xa6\x56\xbf\x76\x9a\x6c\x71\x67\xb5\x52\x1e\x32\x1e\xd4\x86\x07\x9b\xfb\x04\x9d\x0c\x17\x10\x63\xf5\x19\x50\x9b\x1a\x51\x39\xff\x6b\xf8\x87\x96\x1d\x52\x48\x56\x5d\xc7\x3b\x66\x9c\xe3\xda\x91\x5c\xfc\x0c\x00\x00\xff\xff\x79\x8c\xd3\xd8\x9a\x05\x00\x00")

func pluginScriptsInstall_pluginShBytes() ([]byte, error) {
	return bindataRead(
		_pluginScriptsInstall_pluginSh,
		"plugin-scripts/install_plugin.sh",
	)
}

func pluginScriptsInstall_pluginSh() (*asset, error) {
	bytes, err := pluginScriptsInstall_pluginShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugin-scripts/install_plugin.sh", size: 1434, mode: os.FileMode(420), modTime: time.Unix(1531432614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"environment/jenkins-jvm-environment": environmentJenkinsJvmEnvironment,
	"environment/required-plugins": environmentRequiredPlugins,
	"init-groovy/0-jenkins-config.groovy": initGroovy0JenkinsConfigGroovy,
	"jobdsl/seed-job-dsl": jobdslSeedJobDsl,
	"plugin-scripts/install_plugin.sh": pluginScriptsInstall_pluginSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"environment": &bintree{nil, map[string]*bintree{
		"jenkins-jvm-environment": &bintree{environmentJenkinsJvmEnvironment, map[string]*bintree{}},
		"required-plugins": &bintree{environmentRequiredPlugins, map[string]*bintree{}},
	}},
	"init-groovy": &bintree{nil, map[string]*bintree{
		"0-jenkins-config.groovy": &bintree{initGroovy0JenkinsConfigGroovy, map[string]*bintree{}},
	}},
	"jobdsl": &bintree{nil, map[string]*bintree{
		"seed-job-dsl": &bintree{jobdslSeedJobDsl, map[string]*bintree{}},
	}},
	"plugin-scripts": &bintree{nil, map[string]*bintree{
		"install_plugin.sh": &bintree{pluginScriptsInstall_pluginSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

