// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/bindata/.DS_Store
// pkg/bindata/init-groovy/0-jenkins-config.groovy
// pkg/bindata/java_opts
// pkg/bindata/java_opts.values
// pkg/bindata/jenkins_opts
// pkg/bindata/jenkins_opts.values
// pkg/bindata/plugin-scripts/install_plugin.sh
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6c\x14\x45\x18\xff\xbe\xa3\xd0\x99\x14\xe8\x94\x7f\x6d\xef\x10\x4f\xca\xdf\x70\xc5\x6b\x0b\x6d\x81\x82\xed\xb5\xfc\xa9\xc5\x40\xb8\x96\x96\x02\x96\xbd\xdd\xa1\x9d\xb8\xb7\x7b\xdc\xee\xdd\x95\x96\x1a\x8c\xfa\x60\x22\x7f\x5f\x0c\xa0\x89\x31\xbe\x18\x88\x0f\x26\x48\x62\x7c\xf1\x45\x51\x4c\x08\x49\x23\xc8\x83\x0f\xfa\x62\x7c\x22\x1a\x4d\x7c\xd2\xec\xee\x1c\xb4\xb5\x77\x7d\x30\x84\x8a\xfb\x4b\x2e\xbf\x9d\x6f\xbe\x99\xd9\x99\xf9\xcd\x7c\x3b\x99\x03\x00\x8c\x65\xb4\x3a\x80\x30\x00\x10\xf0\x98\xcd\x87\x69\x41\xe4\xef\x1f\x08\x48\xae\x70\xea\x03\x60\x00\xb5\x30\x08\x69\x30\xc1\x84\xec\xf4\x75\xf9\xf0\xe1\xc3\x87\x0f\x1f\x3e\x9e\x30\xd0\x23\x52\xf6\xa4\x5f\xc4\x87\x0f\x1f\xb3\x0e\x28\x0f\x06\x0e\xb7\x4a\x3e\xed\x31\xca\xfc\x80\xe4\x92\x09\x65\x98\xe4\xb0\xe4\x56\xc9\xa7\x3d\x46\xe9\x17\x90\x5c\x22\x99\x48\x66\x92\xc3\x92\x5b\x25\x9f\xf6\x58\x6e\x5a\x28\x0f\x1f\x28\x5b\x46\x79\x42\x41\x26\x39\x2c\xb9\xf5\xf1\x8c\x8d\x0f\x1f\x4f\x03\x9c\xb3\x7b\x19\x08\x30\x40\x80\x3d\xe9\xfc\x7e\x32\x91\xb3\x52\x09\xdd\x4c\x00\xc0\xd7\x89\x94\x2e\x2c\x3b\x1a\xbd\x8b\x81\x39\x25\x73\xe7\x95\x12\x42\xca\xc8\x02\x72\x34\x3e\x64\xe6\xe2\xb6\x62\x67\xac\x98\x92\x3e\xec\xa4\xf6\x2b\xf6\x50\x42\x3e\x77\x9b\xa6\xfe\xf0\x59\x49\x1c\x14\x3c\x37\xc0\x96\xb4\x9b\x86\xad\x08\x83\xa7\xdd\xc2\x42\xe3\x09\x25\x7d\xa4\x57\x18\x9a\x99\x8b\x99\x19\x43\xb3\x0e\x4f\xc8\xa0\x94\x12\x3a\xc0\xaa\x46\x47\x9b\xa3\x9b\x22\xe1\xcd\x9b\xb6\x8c\x45\xc2\xa3\x4d\x4d\xd1\x48\x78\x53\x43\xe3\xd8\x18\x25\x95\xab\xeb\xb6\x77\x1e\x4b\x9e\x1c\x19\x3d\x35\xf6\xea\x25\xaf\x57\xf9\x5d\x02\xca\xa7\x74\xf7\x72\xe1\xee\x6a\x96\xaa\x27\x4c\x53\xc7\xc2\x2e\xfa\x60\x5d\x5c\x35\x93\x29\xaf\xae\xd2\x96\x22\x9e\x56\xb6\xdd\x1b\xbb\xc0\xc5\xfc\xd8\xdd\xcb\x8f\x1d\xa5\x74\xfe\x9e\xce\x17\xbb\x06\x18\xcb\x58\xfc\x00\xd7\x15\x5b\x64\x79\x87\x62\x73\x6b\x80\x95\x5b\x43\x66\xae\x53\x35\x8d\xfd\x69\x9e\x75\x07\xac\x42\x55\x74\x35\xa3\x2b\x36\x6f\xd3\xf5\xb8\x18\xe1\x56\xaf\x6a\xea\x99\xa4\x61\xf5\xd9\x7c\xd8\x76\x2c\xfd\x96\x99\xb6\xdb\x5d\x63\x9f\x50\x4d\xc3\xb1\x0d\xb0\x45\x4e\xf9\x7d\x29\x5b\x98\x86\x75\x90\xa7\x2d\x61\x1a\x94\xd2\xab\x0b\x96\xad\xa8\x59\x1b\xa9\x6b\xdc\xf6\x42\xc7\xf8\xc2\x72\x56\x41\x17\xd3\xa5\xbd\x59\x61\x89\x84\xce\x7b\x72\x42\xb3\x87\x0e\x29\x96\xca\x0d\x4d\x18\x83\xfd\x42\xe3\x86\x2d\x8e\x0b\x9e\xa6\x15\x18\xa1\xdd\x86\x92\xe4\xe3\x95\x55\xd5\x15\xc1\x50\xf0\x99\x42\xa5\x08\xab\x21\x7d\x99\x84\x38\x91\x11\xf6\x49\xaf\x8d\x70\x70\x25\x65\xd7\xc9\x11\x4d\xb1\xf9\x4b\xa6\xe6\xd4\xa8\xb9\x39\xc1\x70\x70\x0d\x21\x87\x1d\x7b\x7b\x9a\x2b\x36\xd7\xc6\x2b\xca\xd9\xc2\x75\xeb\x83\xb4\xdb\x12\x23\x9c\x29\x84\xba\x96\xda\x8d\x94\x76\xbf\x22\x0c\x8d\x59\xd4\xb3\xd4\x37\xd0\x60\x8f\xae\x24\xb8\xce\x34\x4a\x5c\x53\x53\x33\x0d\xf6\x66\xbd\xbe\xb2\x2e\x69\x6c\x59\x4c\x83\x7d\xaa\x99\x4c\x72\xc3\xb6\x28\xf1\x9a\x6d\x0b\xb6\x13\x76\x93\xbc\xec\x34\xbc\x57\xb1\xec\x7d\x29\x6e\x3c\x7a\xa5\xdd\x84\x1c\x72\x72\xda\x34\x8d\x6b\x35\xad\xeb\xbc\x19\x77\x7b\x5f\xd3\x1a\xf5\x52\xcc\x89\x59\xd5\x10\x81\x1d\x70\x00\xfa\x41\x05\x03\x72\xf0\x36\x9c\x81\xb3\x70\x0e\xae\xc0\x87\x70\x0d\x3e\x81\xcf\xe1\x2b\xb8\x09\xb7\xe0\x5b\xb8\x03\xf7\xe1\x47\xf8\x19\x7e\x85\xdf\xe0\x77\xf8\x03\xfe\x42\x82\x14\xcb\x70\x3e\x56\xe3\x4a\xac\xc1\x55\x18\xc5\x2d\xb8\x03\x5b\xb1\x0d\x63\xd8\x85\xfb\xf1\x00\xc6\xb1\x1b\x8f\xa2\x8a\x1c\x8f\xe3\x20\xa6\x70\x18\x47\x70\x14\x4f\xe1\x9b\x78\x16\xcf\xe1\x79\xbc\x84\x97\xf1\x5d\x7c\x0f\xaf\xe1\x75\xfc\x14\x6f\xe0\x17\xf8\x0d\xde\xc6\x7b\xde\xfb\x05\xf2\x8b\x60\xef\xe4\x35\x80\xf7\x8b\xea\x56\xae\xf9\xc0\xa1\x69\x75\xbb\x73\xd7\xee\xd8\x93\xd1\xed\xf7\x0b\x9c\xb9\x59\xb4\x78\xc9\xd2\x65\xcf\xae\x5a\xbf\xb1\xa1\x79\x7b\xdb\xc3\x49\x9d\x32\x8b\x13\xd5\xe4\x8a\xc8\x53\x89\xab\x9e\xbc\x3a\xdc\xb9\x9c\x2c\xc7\xca\xaa\xea\x60\x68\x39\x5d\x51\x48\xd6\x3d\xc2\xd0\xf8\x30\x71\xd6\x01\x2b\x1d\x0f\x56\x55\x57\x86\x9f\x0b\x85\x98\x23\x23\xe2\x26\x57\xaf\x09\x85\x58\x80\x5d\x27\xc4\xad\x8b\x6e\x08\xd5\x52\xa6\x10\x36\xc7\xab\x3a\x4a\xeb\x09\xd3\x28\x9b\xeb\xe5\x6e\xa6\x4d\x94\x59\x94\x95\x78\xb9\x5b\x69\x0b\x61\x5d\x94\xcd\x73\xab\xda\xb1\x9c\x52\x06\x94\xba\x89\xd8\x9a\x10\x65\x48\x68\x01\x21\x16\x91\xe1\x07\x70\x15\x3e\x83\x2f\xe1\x16\xdc\x81\xef\xe0\x07\xf8\x09\x1e\xc0\x9f\x88\x58\x8a\x15\x58\x89\x55\x18\xc2\xe5\xb8\x02\xd7\xe2\x7a\xdc\x80\x11\xac\xc5\x46\x6c\xc6\xad\xb8\x0d\x5b\x70\x27\xee\xc2\x3d\xd8\x89\x5d\xd8\x8d\x3d\xd8\x8b\x7d\xd8\x8f\x2a\x6a\xae\x10\x05\xa6\xd1\xc2\x0c\x66\x71\x18\x5f\xc3\xd7\xf1\x0d\x57\x90\xe7\xf1\x02\x5e\xc4\x2b\xf8\xfe\x14\xf9\xed\x99\x22\xbf\x8f\x0a\xcb\x2f\x69\x76\x74\x68\x19\x5b\x05\xb8\x9b\x3c\xf1\xcb\xc1\x0b\xc5\x3c\xb5\xbc\x27\x3f\x7a\xe3\xee\xf3\x85\x3d\x53\x43\x13\x37\x6d\xf7\xf3\xb0\x80\x67\x36\x9e\x36\x74\xd3\x18\x94\x9f\xba\x0b\x21\x05\x3a\x64\x60\xd0\xf5\xae\x05\x0b\x54\x48\x83\x80\x14\xd8\x60\xcd\xb2\xe0\xd8\x50\xdf\x14\x09\xd7\x37\x36\xfc\xeb\xe0\x58\xb4\xd3\x93\xe3\xdf\xdc\xdb\x33\xfa\xfb\x51\xd0\x8f\x82\xb3\x39\x0a\xce\xa4\x5e\x3f\x16\xfa\xb1\xf0\xb1\xc7\xc2\xa2\x22\x9c\x18\x11\xbb\xe6\x3d\x38\x33\xb3\xff\xc3\xb8\xa8\x47\x3e\x7e\xe7\xad\x99\xfc\xa7\x89\x8e\x45\xfd\xa7\xc4\x48\x1f\xff\x61\xcc\xf1\x28\x5c\x06\x00\x3b\x0b\xdf\xff\xfb\xf0\xe1\xe3\x29\x06\x96\x74\xc4\x3b\x62\x45\x76\xf4\x80\xbc\x08\x38\x96\x2f\x30\xc3\x45\x40\xc0\xfb\xc3\xd0\x3a\x69\x8b\xc2\xa3\x72\xb3\xe3\x32\xc0\xff\xe6\xf1\xcf\xff\xff\xf3\xf3\xff\xdf\x01\x00\x00\xff\xff\x3b\x27\x23\x89\x04\x28\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 10244, mode: os.FileMode(420), modTime: time.Unix(1531431221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGroovy0JenkinsConfigGroovy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xdb\x3c\x0c\xbd\xeb\x57\xe8\xcb\x77\x88\x5d\xac\x3e\x0c\xbb\x6d\x2d\x10\x74\x1d\xd6\x2e\xeb\x82\x06\xc5\x0e\xc3\x0e\xaa\xcc\x38\xea\x64\xb1\x20\xa9\x64\x59\x90\xff\x3e\x58\x76\x5a\x3b\x4d\x77\x24\xfd\xf8\xf8\xc4\xf7\xfc\xff\x7f\x15\x21\xae\x36\x4a\xb9\xfa\x11\x49\xf4\x03\x84\x5f\x2e\x70\x51\x63\x09\xbe\x38\xd9\xb7\x97\xb1\x64\x0c\x05\x83\x8d\xe4\x64\xf3\xfc\x61\x88\xbf\x6e\xab\x29\x5a\x23\x0e\xc3\x05\x86\x85\xab\x22\xa5\xe2\x35\x2a\xcb\xb4\x28\x3e\xc2\xc2\x44\x2f\x17\x14\xeb\xfb\x2b\xe6\x08\x74\xb8\xe0\x09\xcf\x6f\xeb\xe2\x44\xa9\x12\x16\xda\x05\x16\x13\x2c\xe8\x33\xdd\x6d\x2e\x2a\x90\xab\xae\x9b\xe5\xea\x91\x5c\x10\x1f\xf4\xe8\xf4\xf4\x5c\x5b\x02\x23\x2e\x54\xda\xa3\x35\x5e\x47\x06\xd2\xe3\xed\xb6\xb8\x63\xa0\xdd\x6e\x3c\x6a\x39\x5b\x79\xb7\x60\x7c\xad\xcf\x74\x80\xb5\xfe\x9c\x3a\x33\x72\x2b\x23\x30\xef\x64\x24\x40\xb6\x30\x9e\x21\x57\xbd\x99\x22\x6d\x81\x89\xb5\x18\x83\x64\x3d\xfe\x37\x69\xd9\xcc\x30\xaf\x91\xca\xdd\x6e\x9c\xab\xbd\xfe\x82\x41\x86\xc4\x3d\xc6\xbc\xd5\xc5\x42\x46\xa0\xda\x74\xa2\x3e\x45\xef\x2f\x30\x08\xa1\xff\x16\x2c\x4c\xb1\xaa\xa0\xbc\x0a\x93\x28\x4b\x24\xf7\x27\x5d\x7c\xde\x8d\x64\xb9\xda\x4f\x37\x9b\x26\xde\xe3\x7a\x12\x30\x6c\x6a\x8c\x7c\x0b\xa6\xdc\xbf\xa3\xaf\xe7\x38\xd3\x9e\x27\x57\xc3\xdb\x32\x48\x3a\x6d\xe7\x96\x8e\xe4\xdb\xdb\x92\x6f\x4f\xfb\x30\x4c\xc6\xb3\x63\x47\xb3\xd2\xd8\x98\xe5\x87\x43\x8d\xac\x3b\xf2\xd9\x33\xf1\x51\xc8\xa4\xac\x5d\x98\x94\x25\x01\x73\xc2\xa6\xc6\x65\x6d\xdc\x2b\x23\x66\xd5\x64\xe5\xf8\x83\xe2\xa3\x2e\xdb\x6c\x6a\xdb\x84\x93\xb5\x4b\xf1\x1c\x0d\x8e\xd5\xcb\x6d\xd6\xb8\xf3\x32\xce\x99\x50\x84\xfc\x1f\x5b\xae\x6f\xa6\xb3\x91\x9a\x83\x7c\x98\x0b\xb9\x50\x9d\x6b\x53\x41\x90\x19\xa1\xa0\x45\xcf\x53\xc7\xa2\xcf\xf4\x8f\x71\x03\x7c\x77\x6a\x31\x04\xb0\xd2\xa4\x6a\xe6\x42\x35\xfe\x39\x34\x6f\x30\x9a\xbd\x64\x3a\xc8\x9e\x37\x2b\x68\x67\x90\x24\xdb\x6e\x75\xf1\x54\xe9\xdd\x6e\x08\xbe\x89\xf5\xe5\x6f\xb0\x51\x90\x38\x41\x9f\xaa\x04\x1d\x3e\x10\x82\xb9\xf7\xa0\x13\x9b\x16\xd4\xb5\x61\x01\xd2\xfb\x9f\x59\x73\xbc\xe7\x0d\x0b\xd4\xbd\x7b\xba\xf0\x00\x56\x90\x06\xff\x72\xf2\xf0\xfb\xd2\x09\x78\xc7\x72\x1b\x3d\x14\xd6\x1b\xe6\xbc\x91\xf4\x35\xb1\x7e\x71\xde\xcf\xd7\x4e\xec\xb2\xcb\xf3\x7b\xd5\x13\xde\x99\xac\xd4\xdf\x00\x00\x00\xff\xff\xac\x20\x34\xbc\xf3\x04\x00\x00")

func initGroovy0JenkinsConfigGroovyBytes() ([]byte, error) {
	return bindataRead(
		_initGroovy0JenkinsConfigGroovy,
		"init-groovy/0-jenkins-config.groovy",
	)
}

func initGroovy0JenkinsConfigGroovy() (*asset, error) {
	bytes, err := initGroovy0JenkinsConfigGroovyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init-groovy/0-jenkins-config.groovy", size: 1267, mode: os.FileMode(420), modTime: time.Unix(1531518825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _java_opts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\x0c\x73\x8c\xf7\x0f\x08\x09\x06\x04\x00\x00\xff\xff\xdf\xfc\xbe\xf5\x09\x00\x00\x00")

func java_optsBytes() ([]byte, error) {
	return bindataRead(
		_java_opts,
		"java_opts",
	)
}

func java_opts() (*asset, error) {
	bytes, err := java_optsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "java_opts", size: 9, mode: os.FileMode(420), modTime: time.Unix(1530830821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _java_optsValues = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x8d\xc8\x2d\x36\x34\x30\x32\xc9\x55\xd0\x8d\xc8\xad\x80\xb2\x5c\xb2\x52\xf3\xb2\x33\xf3\x8a\xf5\x32\xf3\x8a\x4b\x12\x73\x72\xf4\x8a\x4a\xf3\x82\x53\x4b\x4a\x0b\xc2\x33\xab\x12\x8b\x52\x6c\xd3\x12\x73\x8a\x53\x91\x94\x39\xfb\x78\xea\xa5\x64\x16\x27\x26\xe5\xa4\xa6\xd8\x96\x14\x95\xa6\x02\x02\x00\x00\xff\xff\xaf\x5b\x02\x90\x56\x00\x00\x00")

func java_optsValuesBytes() ([]byte, error) {
	return bindataRead(
		_java_optsValues,
		"java_opts.values",
	)
}

func java_optsValues() (*asset, error) {
	bytes, err := java_optsValuesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "java_opts.values", size: 86, mode: os.FileMode(420), modTime: time.Unix(1530830837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_opts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\xf5\xf3\xf6\xf4\x0b\x8e\xf7\x0f\x08\x09\x06\x04\x00\x00\xff\xff\xfe\x8d\xeb\x4b\x0c\x00\x00\x00")

func jenkins_optsBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_opts,
		"jenkins_opts",
	)
}

func jenkins_opts() (*asset, error) {
	bytes, err := jenkins_optsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_opts", size: 12, mode: os.FileMode(420), modTime: time.Unix(1530830950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_optsValues = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x4d\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\x0e\x4a\x4d\xcc\xc9\xd5\x2b\x48\x2c\x2e\x2e\x4f\xd1\x53\xd1\x70\x74\xf1\xf5\xf4\x8b\x0f\x0d\x76\x0d\xd2\xb4\x85\xf1\x02\x1c\x83\x83\xc3\xfd\x83\x5c\x34\x15\x30\xf4\x15\xe5\xe7\xa4\x16\xe3\xd0\x06\xe6\x01\x02\x00\x00\xff\xff\xf2\xf1\x7f\x85\x6a\x00\x00\x00")

func jenkins_optsValuesBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_optsValues,
		"jenkins_opts.values",
	)
}

func jenkins_optsValues() (*asset, error) {
	bytes, err := jenkins_optsValuesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_opts.values", size: 106, mode: os.FileMode(420), modTime: time.Unix(1530830950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginScriptsInstall_pluginSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x4f\xdb\x30\x10\x7e\xc6\xbf\xe2\x30\x48\x05\x89\xd4\x68\x7b\x2b\xa5\xdb\x54\x01\xea\xc6\x56\x54\xaa\x81\x34\xed\xc1\x4d\x2e\x89\x87\x6b\x67\xb6\x53\x8a\x58\xfe\xfb\x64\x3b\x55\x19\x42\xdb\x32\x2d\x2f\x71\xec\xf3\x77\xdf\x7d\x77\x5f\xf6\x76\x59\x6d\x0d\x5b\x08\xc5\x50\xad\x60\xc1\x6d\x49\x2a\x23\x94\x43\xb5\x22\x64\x0f\x6e\xb8\x70\x90\x6b\x03\xef\x51\xdd\x09\x65\xc1\x69\x90\x9a\x67\xe4\xbe\x14\x12\x61\x17\xd2\xda\x48\x48\x2c\x24\x49\x89\x3c\x83\x24\x31\xf8\xbd\x46\xeb\xe0\xe2\x6c\x0e\x8f\x8f\xd0\x7f\x57\x09\x68\x1a\xf8\x01\x85\xc1\x0a\xe8\xab\xe3\x63\x98\x7e\xa0\x30\x02\x96\xe1\x8a\xa9\x5a\xca\x13\x92\x69\xb2\x83\x69\xa9\x81\x8e\x2f\x27\x83\x90\x54\xa8\x22\xe4\xfd\x16\xf3\xf6\xfb\x94\xec\x58\x89\x58\xc1\x6b\x92\x69\x85\x9e\x5c\x81\x0e\xc6\xd7\xb3\x73\xa8\x8c\x76\x98\x3a\xa1\x15\x38\x7d\x87\x8a\x44\xb0\x0b\x74\x01\xe7\xc5\x18\x4a\x52\x53\x2f\x17\x73\xbf\x3e\xdd\x3f\x08\x75\xf4\xb6\x84\xc3\xe1\xc4\xda\x1a\x0d\xe3\x95\x60\xeb\xa5\x7c\xb3\xae\xb8\x2b\x4f\x53\xad\x52\xee\x0e\x18\x0b\x21\xb3\x58\xee\xb9\x40\x99\x1d\xd1\x01\x3d\x6a\xf7\x0f\x7b\x87\xa4\xa5\x31\x51\xd6\x71\x29\x3d\x93\x4a\xd6\x85\x50\x41\x97\xab\xb0\x9c\x64\xd0\x34\x6f\xb7\xdf\x9f\xd1\x58\x4f\xb1\x69\x28\x89\xd2\xde\xc2\xd5\xf4\x7a\x0e\x49\x06\xbd\x61\x2b\xc6\x68\x28\x22\x64\x8b\x77\x4a\xff\x0a\x10\xd8\x68\xc8\x36\x10\xbd\xb6\x63\x68\xa0\x37\xd6\xbe\xdf\x2e\x99\x3f\x54\x38\x00\x87\x6b\xe7\xcb\x7d\x12\x41\x6f\x13\xaf\x61\x12\xc4\x1a\xc0\xfe\x56\x39\xfa\xa4\xc7\x91\xcc\x47\xae\x78\x81\x86\xb5\x14\x3f\x61\x8a\xd6\x72\xf3\x10\xe9\xd8\x67\x55\x75\xcb\xc0\x2c\xcf\x71\x86\xd6\x71\xe3\xfc\x00\xdc\x1b\xe1\x70\x23\x6a\xaa\x55\x2e\x0a\x3f\xa0\xb9\x90\x48\x52\xee\x60\xc4\xdc\xb2\x62\xcf\xc4\xe9\xbf\x24\x4e\xbf\xbd\x3d\x1c\x9e\x4d\x2f\xc9\x36\x62\x1c\xb7\x9b\x86\xf8\xfd\xb6\xa1\x37\x7e\x94\x7c\xa2\xae\xf0\x03\x1a\x68\x75\xbd\x46\x88\xc8\xe1\x8b\x77\x59\xe7\x7a\xbe\x9e\x80\x2b\x51\x11\x02\x00\xf0\x1b\x3b\xfb\xe3\xff\x6a\x69\x0f\x98\xe9\xf0\xf2\xcf\x9f\xdd\xbd\x89\xdc\x98\x3c\x02\x78\xa3\x47\xea\xa6\x56\xbf\x76\x9a\x6c\x71\x67\xb5\x52\x1e\x32\x1e\xd4\x86\x07\x9b\xfb\x04\x9d\x0c\x17\x10\x63\xf5\x19\x50\x9b\x1a\x51\x39\xff\x6b\xf8\x87\x96\x1d\x52\x48\x56\x5d\xc7\x3b\x66\x9c\xe3\xda\x91\x5c\xfc\x0c\x00\x00\xff\xff\x79\x8c\xd3\xd8\x9a\x05\x00\x00")

func pluginScriptsInstall_pluginShBytes() ([]byte, error) {
	return bindataRead(
		_pluginScriptsInstall_pluginSh,
		"plugin-scripts/install_plugin.sh",
	)
}

func pluginScriptsInstall_pluginSh() (*asset, error) {
	bytes, err := pluginScriptsInstall_pluginShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugin-scripts/install_plugin.sh", size: 1434, mode: os.FileMode(420), modTime: time.Unix(1531432614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"init-groovy/0-jenkins-config.groovy": initGroovy0JenkinsConfigGroovy,
	"java_opts": java_opts,
	"java_opts.values": java_optsValues,
	"jenkins_opts": jenkins_opts,
	"jenkins_opts.values": jenkins_optsValues,
	"plugin-scripts/install_plugin.sh": pluginScriptsInstall_pluginSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"init-groovy": &bintree{nil, map[string]*bintree{
		"0-jenkins-config.groovy": &bintree{initGroovy0JenkinsConfigGroovy, map[string]*bintree{}},
	}},
	"java_opts": &bintree{java_opts, map[string]*bintree{}},
	"java_opts.values": &bintree{java_optsValues, map[string]*bintree{}},
	"jenkins_opts": &bintree{jenkins_opts, map[string]*bintree{}},
	"jenkins_opts.values": &bintree{jenkins_optsValues, map[string]*bintree{}},
	"plugin-scripts": &bintree{nil, map[string]*bintree{
		"install_plugin.sh": &bintree{pluginScriptsInstall_pluginSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

