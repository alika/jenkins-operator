// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/bindata/.DS_Store
// pkg/bindata/init-groovy/jenkins_security.groovy
// pkg/bindata/java_opts
// pkg/bindata/java_opts.values
// pkg/bindata/jenkins_opts
// pkg/bindata/jenkins_opts.values
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6c\x54\x45\x18\xfe\xbf\xa5\xc0\x4c\x0a\x74\xca\xad\xdb\x5d\xc4\x95\x72\x0d\x5b\xdc\x72\x6b\xb9\xba\xdd\x96\x4b\x2d\x06\xc2\xb6\xb4\x14\xb0\x9c\xdd\x33\xb4\x27\x9e\x3d\x67\xdd\x73\x76\xb7\xb4\xd4\x60\xd4\x37\x05\xe4\x0d\xd0\xc4\x18\x5f\x0c\x3c\x99\x20\x89\xf1\xc5\x17\x45\x31\x31\x24\x8d\x20\x0f\x3e\xe8\x8b\x8f\x46\xa3\x89\x4f\x9a\x73\x29\x2c\xb5\x5b\x7d\x31\x18\x38\x5f\xb2\xf9\xce\xfc\xff\x3f\x33\x3b\x33\xdf\x99\xd9\x7f\x96\x88\x90\x2a\xaa\x2d\x44\x61\x22\x62\xe4\xb1\xa8\xa5\x69\xc1\xfc\xcf\xdf\x10\xaa\x08\x00\x91\x20\x6a\xa6\x21\x2a\x90\x49\x26\x95\xa6\x6f\x2b\x40\x80\x00\x01\x02\x04\x08\xf0\x88\x01\x8f\x58\x95\x73\x3f\x40\x80\x00\x4f\x30\x9c\xfd\x21\xe6\x73\xd2\xe7\xb3\x1e\xc3\xf7\x87\x7c\xae\xa9\xa8\x23\x7c\x8e\xf9\x9c\xf4\xf9\xac\xc7\xf0\xe3\x42\x3e\xd7\xf8\xcc\x7c\x16\x3e\xc7\x7c\x4e\xfa\x7c\xd6\x63\x7f\xd3\x82\x9f\x7c\xc0\xef\x19\x7e\x86\x02\xe1\x73\xcc\xe7\xe4\x7f\x33\x37\x01\x02\x3c\x0e\x70\x5e\x9b\x5a\xd2\xc8\x20\x8d\xec\x87\xf2\xf7\xd3\x99\xb2\x95\xcf\xe8\x66\x86\x88\xbe\xcc\xe4\x75\xcd\xb2\x13\x89\x3b\x08\xcd\xaa\x99\x3d\x67\x2e\x63\xac\x96\xcd\x67\x27\xd2\xc3\x66\x39\x6d\x2b\x76\xd1\x4a\x29\x85\x63\x4e\xe9\x90\x62\x0f\x67\xfc\xe7\x1e\xd3\xd4\xef\x3f\x2b\x99\x23\x9a\x2c\x0f\x8a\xc5\x1d\xa6\x61\x2b\x9a\x21\x0b\x6e\x65\x4d\x95\x19\xa5\x70\xbc\x4f\x33\x54\xb3\x9c\x32\x8b\x86\x6a\x1d\xab\x70\x70\xce\x19\x1f\x14\xe1\xb1\xb1\xb6\xc4\xe6\x78\x6c\xcb\xe6\x6d\xe3\xf1\xd8\x58\x6b\x6b\x22\x1e\xdb\xbc\x69\xeb\xf8\x38\x67\x0d\xab\x5a\x76\x75\x9d\xcc\x9d\x1e\x1d\x3b\x33\xfe\xca\x25\x6f\x54\x93\xbb\x04\xd5\x4d\x19\xee\xe5\xea\xc3\xd5\x87\x5a\xd2\x59\x33\x97\xf7\x02\x43\x62\x86\x48\xab\xd4\xe1\x4d\x4c\xe8\xe2\xe4\xc4\xdc\x9d\x9c\x18\xce\xf9\xbc\xfd\x5d\xcf\x77\x0f\x0a\x51\xb4\xe4\x61\xa9\x2b\xb6\x56\x92\x9d\x8a\x2d\xad\x41\x51\x67\x0d\x9b\xe5\xae\xac\x69\x1c\x2a\xc8\x92\x3b\x1b\xf5\x59\x45\xcf\x16\x75\xc5\x96\xed\xba\x9e\xd6\x46\xa5\xd5\x97\x35\xf5\x62\xce\xb0\xfa\x6d\x39\x62\x3b\x96\x01\xcb\x2c\xd8\x1d\xae\xb1\x5f\xcb\x9a\x86\x63\x1b\x14\x0b\x9d\xfa\x07\xf3\xb6\x66\x1a\xd6\x11\x59\xb0\x34\xd3\xe0\x9c\x5f\x9d\xbf\x74\x79\xd3\x9a\x78\xcb\xd6\x1d\xcf\x75\x4e\x2c\xa8\x13\xf5\x7c\x11\x5f\xd2\x57\xd2\x2c\x2d\xa3\xcb\xde\xb2\xa6\xda\xc3\x47\x15\x2b\x2b\x0d\x55\x33\x86\x06\x34\x55\x1a\xb6\x76\x4a\x93\x05\x5e\x8f\x38\xef\x31\x94\x9c\x9c\x68\x08\x37\xd6\x47\xa2\x91\xa7\xaa\xd5\x62\xa2\x89\xf5\x17\x33\xda\xcb\x45\xcd\x3e\xed\xf5\x11\x8b\xac\xe0\xe2\x3a\x3b\xae\x2a\xb6\x7c\xc1\x54\x9d\x16\x55\xd7\x13\x89\x45\x56\x33\x76\xcc\xb1\x77\x14\xa4\x62\x4b\x75\xa2\xbe\x4e\x2c\x58\xbb\x2e\xc2\x7b\x2c\x6d\x54\x0a\x85\x71\xd7\xd2\xbc\x81\xf3\x9e\x97\x34\x43\x15\x16\xf7\x2c\x1b\x37\xf1\x48\xaf\xae\x64\xa4\x2e\x54\xce\x5c\x53\x6b\x1b\x8f\xf4\x95\xbc\xb1\x8a\x6e\xdf\xb8\x73\x11\x8f\xf4\x67\xcd\x5c\x4e\x1a\xb6\xc5\x99\xd7\x6d\x7b\xa4\x83\x89\x9b\xec\x45\xa7\xe3\x03\x8a\x65\x1f\xcc\x4b\xe3\xc1\x57\xda\xc7\xd8\x51\xc7\xd3\xae\xaa\x52\x6d\x4a\xae\xf5\x56\xdc\x1d\x7d\x53\x32\xe1\x95\x84\x73\x20\x35\x52\x9c\x76\xd3\x61\x1a\xa0\x2c\x19\x54\xa6\x37\xe9\x2d\x3a\x47\xe7\xe9\x0a\x7d\x40\xd7\xe8\x23\xfa\x94\xbe\xa0\x9b\x74\x8b\xbe\xa6\xdb\x74\x8f\x7e\xa0\x9f\xe8\x17\xfa\x95\x7e\xa3\xdf\xe9\x4f\x30\x70\xd4\x62\x1e\x1a\xb1\x02\x4d\x58\x89\x04\xb6\x61\x37\x92\x68\x47\x0a\xdd\x38\x84\xc3\x48\xa3\x07\x27\x90\x85\xc4\x29\x0c\x21\x8f\x11\x8c\x62\x0c\x67\xf0\x06\xce\xe1\x3c\x2e\xe0\x12\x2e\xe3\x1d\xbc\x8b\x6b\xb8\x8e\x8f\x71\x03\x9f\xe1\x2b\x7c\x83\xbb\xbe\x3e\x27\x15\x7e\xe0\x61\x81\xe3\xde\x8c\xba\xf5\x5f\xe8\xd0\xd1\x69\x75\xbb\x67\xef\xbe\xd4\xa3\xd1\xed\x77\xf3\x9d\xb5\x59\xb8\x68\xf1\x92\xa5\x4f\xaf\x5c\xb7\x61\x53\xdb\xae\xf6\xfb\x8b\x3a\x65\x15\x2b\xd5\xe4\x8a\xc8\x53\x89\xab\x9e\x49\x75\xb8\x6b\xf9\xb0\x1c\x1b\xc2\x8d\x91\xe8\x32\xbe\xbc\x9a\xac\x7b\x35\x43\x95\x23\xcc\x79\x0f\xc4\xdc\x89\x48\xb8\xb1\x21\xf6\x4c\x34\x2a\x1c\x19\x31\xb7\xb8\x6a\x75\x34\x2a\x42\xe2\x3a\x63\x6e\x5b\x7c\x7d\xb4\x99\x0b\x85\x89\x59\x5e\xd3\x09\xbe\x91\x09\x95\x8b\xd9\x9e\x77\x0b\x6f\xe5\xc2\xe2\xa2\xc6\xf3\x6e\xe7\x3b\x99\xe8\xe6\x62\x8e\xdb\xd4\xee\x65\x9c\x0b\xe2\xdc\x2d\xa4\x56\x47\xb9\x00\xe3\x55\x84\x38\x83\x0c\xdf\xa7\xab\xf4\x09\x7d\x4e\xb7\xe8\x36\x7d\x4b\xdf\xd3\x8f\xf4\x33\xfd\x01\x60\x2e\xea\xd1\x80\x30\xa2\x58\x86\xe5\x58\x83\x75\x58\x8f\x38\x9a\xb1\x15\x6d\xd8\x8e\x1d\xd8\x89\x3d\xd8\x8b\xfd\xe8\x42\x37\x7a\xd0\x8b\x3e\xf4\x63\x00\x59\xa8\xae\x10\x35\x14\x60\xa1\x88\x12\x46\xf0\x2a\x5e\xc3\xeb\xae\x20\x2f\xe0\x6d\x5c\xc4\x15\xbc\x37\x45\x7e\xfb\xa7\xc8\xef\xc3\xea\xf2\xcb\x99\x9d\x9d\x6a\xd1\xce\x12\xdd\x91\x27\x6e\xdc\x79\x76\xa6\x48\xf5\x5f\x46\xe6\x87\x2b\x37\x6d\xf7\xb7\x5f\x95\xc8\x52\xba\x60\xe8\xa6\x31\xf4\x20\xef\x7d\xe2\x31\xcb\xa3\xb0\x93\xff\xef\xa9\x7e\xff\x1f\x20\x40\x80\xc7\x18\xa8\xe9\x4c\x77\xa6\x66\xd8\x18\x43\xfe\x45\xc0\xc9\xc9\x0a\xff\x70\x11\x80\x8a\x3f\x0c\xff\x77\x17\x01\xc1\xf9\x1f\x9c\xff\x01\xe8\xaf\x00\x00\x00\xff\xff\xbb\xcb\xcb\x5f\x04\x20\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 8196, mode: os.FileMode(420), modTime: time.Unix(1530900132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGroovyJenkins_securityGroovy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x51\x4f\xc2\x40\x10\x84\xdf\xef\x57\x9c\xf8\x40\x4b\xe4\xfe\x01\x26\x8d\x68\xc4\xa8\x90\x36\xc4\x47\x73\xb9\x2e\xe5\xf4\xba\x4b\xee\xf6\x4a\xea\xaf\x37\x94\x56\x6a\xc2\xeb\x64\xe6\x9b\xd9\xbd\xbd\xa9\x3c\x51\xd3\x0a\x61\xeb\x03\x79\x96\x5f\x80\xdf\x16\x83\xaa\xa9\x04\xa7\x66\x83\xbc\x8f\x65\x20\x54\x01\x4c\xf4\x96\x5b\x35\x13\xa2\x84\x9d\xb4\x18\x58\xa3\x01\xb9\x90\x2f\x7d\xb0\x02\x5e\xf5\x6a\x92\x0a\x71\xf0\x16\xd9\xa1\x9c\xcc\xe7\xf7\xd2\x78\xd0\x6c\xb1\x92\x8e\x8c\x76\x32\x06\xf0\x72\xaa\xcb\xda\xe2\x74\x72\x06\x9e\x7b\x72\xd0\xae\x96\x0b\x89\x70\x94\xcf\x9d\xb2\xf1\xb6\xd1\x0c\x45\xdf\xdf\x19\x92\x9d\x76\x01\xd2\x2e\xd7\x41\xb6\x27\xde\x42\x16\x6d\x60\xa8\x15\x60\xa3\xb2\xe5\xdb\xea\xfd\x73\x5b\x3c\xe6\x17\xd7\x46\x87\x70\xcd\xb5\xc9\x8a\xe2\x63\x9d\x2f\x85\x18\x8d\x50\xdd\x64\xc8\x8c\xa1\x88\x9c\xfc\xd5\xdc\x5d\x58\xa9\x18\xbe\xa0\x02\xf0\xff\x85\x23\x52\x7a\x3e\x30\xb0\xd7\x0c\x55\xdb\x5f\xf7\x14\x9d\x7b\x20\x64\x4f\x6e\x8d\x06\x5e\xa9\xaa\xa0\x5c\x61\x16\x79\x4f\xde\xfe\x68\xb6\x84\x45\x1f\x49\x52\x31\xa4\x4f\x4d\x99\x73\x74\xcc\x90\xb0\xad\x29\x86\x1c\x74\x39\x3c\x64\xbc\xe7\x3a\x69\xe0\x8c\xbd\xba\x81\x24\xfd\x0d\x00\x00\xff\xff\x04\xd3\xc2\x88\x10\x02\x00\x00")

func initGroovyJenkins_securityGroovyBytes() ([]byte, error) {
	return bindataRead(
		_initGroovyJenkins_securityGroovy,
		"init-groovy/jenkins_security.groovy",
	)
}

func initGroovyJenkins_securityGroovy() (*asset, error) {
	bytes, err := initGroovyJenkins_securityGroovyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init-groovy/jenkins_security.groovy", size: 528, mode: os.FileMode(420), modTime: time.Unix(1530898552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _java_opts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\x0c\x73\x8c\xf7\x0f\x08\x09\x06\x04\x00\x00\xff\xff\xdf\xfc\xbe\xf5\x09\x00\x00\x00")

func java_optsBytes() ([]byte, error) {
	return bindataRead(
		_java_opts,
		"java_opts",
	)
}

func java_opts() (*asset, error) {
	bytes, err := java_optsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "java_opts", size: 9, mode: os.FileMode(420), modTime: time.Unix(1530830821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _java_optsValues = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x8d\xc8\x2d\x36\x34\x30\x32\xc9\x55\xd0\x8d\xc8\xad\x80\xb2\x5c\xb2\x52\xf3\xb2\x33\xf3\x8a\xf5\x32\xf3\x8a\x4b\x12\x73\x72\xf4\x8a\x4a\xf3\x82\x53\x4b\x4a\x0b\xc2\x33\xab\x12\x8b\x52\x6c\xd3\x12\x73\x8a\x53\x91\x94\x39\xfb\x78\xea\xa5\x64\x16\x27\x26\xe5\xa4\xa6\xd8\x96\x14\x95\xa6\x02\x02\x00\x00\xff\xff\xaf\x5b\x02\x90\x56\x00\x00\x00")

func java_optsValuesBytes() ([]byte, error) {
	return bindataRead(
		_java_optsValues,
		"java_opts.values",
	)
}

func java_optsValues() (*asset, error) {
	bytes, err := java_optsValuesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "java_opts.values", size: 86, mode: os.FileMode(420), modTime: time.Unix(1530830837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_opts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\xf5\xf3\xf6\xf4\x0b\x8e\xf7\x0f\x08\x09\x06\x04\x00\x00\xff\xff\xfe\x8d\xeb\x4b\x0c\x00\x00\x00")

func jenkins_optsBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_opts,
		"jenkins_opts",
	)
}

func jenkins_opts() (*asset, error) {
	bytes, err := jenkins_optsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_opts", size: 12, mode: os.FileMode(420), modTime: time.Unix(1530830950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_optsValues = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x4d\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\x0e\x4a\x4d\xcc\xc9\xd5\x2b\x48\x2c\x2e\x2e\x4f\xd1\x53\xd1\x70\x74\xf1\xf5\xf4\x8b\x0f\x0d\x76\x0d\xd2\xb4\x85\xf1\x02\x1c\x83\x83\xc3\xfd\x83\x5c\x34\x15\x30\xf4\x15\xe5\xe7\xa4\x16\xe3\xd0\x06\xe6\x01\x02\x00\x00\xff\xff\xf2\xf1\x7f\x85\x6a\x00\x00\x00")

func jenkins_optsValuesBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_optsValues,
		"jenkins_opts.values",
	)
}

func jenkins_optsValues() (*asset, error) {
	bytes, err := jenkins_optsValuesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_opts.values", size: 106, mode: os.FileMode(420), modTime: time.Unix(1530830950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"init-groovy/jenkins_security.groovy": initGroovyJenkins_securityGroovy,
	"java_opts": java_opts,
	"java_opts.values": java_optsValues,
	"jenkins_opts": jenkins_opts,
	"jenkins_opts.values": jenkins_optsValues,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"init-groovy": &bintree{nil, map[string]*bintree{
		"jenkins_security.groovy": &bintree{initGroovyJenkins_securityGroovy, map[string]*bintree{}},
	}},
	"java_opts": &bintree{java_opts, map[string]*bintree{}},
	"java_opts.values": &bintree{java_optsValues, map[string]*bintree{}},
	"jenkins_opts": &bintree{jenkins_opts, map[string]*bintree{}},
	"jenkins_opts.values": &bintree{jenkins_optsValues, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

