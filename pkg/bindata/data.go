// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/bindata/.DS_Store
// pkg/bindata/init-groovy/jenkins_security.groovy
// pkg/bindata/java_opts
// pkg/bindata/java_opts.values
// pkg/bindata/jenkins_opts
// pkg/bindata/jenkins_opts.values
// pkg/bindata/plugin-scripts/install_plugin.sh
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6c\x14\xc5\x1f\xff\x7e\x8f\x02\x33\x29\xd0\x29\xff\xda\xde\xf1\xe3\x77\x52\xfe\x86\x2b\x5e\xff\xd0\x96\xbf\x5e\xaf\xe5\x4f\x2d\x04\xc2\xb5\xb4\x14\xb0\xec\xed\x0e\xed\xc4\xbd\xdd\x73\x77\xef\xae\xb4\xd4\x60\xd4\x37\x05\xe4\x0d\xd0\xc4\x18\x5f\x0c\x3c\x99\x20\x89\xf1\xc5\x17\x45\x31\x31\x24\x8d\x20\x0f\x3e\xe8\x8b\x8f\x46\xa3\x89\x0f\x46\xb3\xbb\x73\xd0\x56\xee\x1a\x63\x08\x0d\xee\x27\xb9\x7c\x76\xbf\xf3\x9d\x99\x9d\x99\xcf\xcc\x77\x26\x73\x00\x80\xc9\x9c\xd6\x08\x10\x05\x00\x02\x3e\xb3\x45\xf0\x48\x10\xf9\xfb\x1b\x42\x92\x99\x5b\x9e\x47\x0d\x30\x0c\x16\x98\x60\x42\xfe\xd1\x65\x05\x08\x10\x20\x40\x80\x00\x01\x9e\x30\xd0\x27\x52\xf9\xa4\x3f\x24\x40\x80\x00\x73\x0e\x28\x0f\x06\x2e\x27\x24\x9f\xf3\x19\x65\x7a\x48\x72\xc5\x94\x3c\x4c\x72\x54\x72\x42\xf2\x39\x9f\x51\xfa\x85\x24\x57\x48\x26\x92\x99\xe4\xa8\xe4\x84\xe4\x73\x3e\xcb\x45\x0b\xe5\xe1\x03\x65\xcd\x28\x4f\x28\xc8\x24\x47\x25\x27\x1e\x4f\xdf\x04\x08\xf0\x34\xc0\x9d\x2e\x95\x20\xc0\x00\x01\xce\xb4\xf3\xfb\x99\x74\xc1\xce\xa6\x75\x33\x0d\x00\x5f\xa4\xb3\xba\xb0\x9d\x78\xfc\x2e\x86\xe6\x55\xcc\x5f\xb0\x90\x10\x52\x49\x16\x93\x93\xa9\x11\xb3\x90\x72\x14\x27\x67\x27\x15\xeb\xb8\xfb\x76\x58\x71\x46\xd2\xf2\xb9\xd7\x34\xf5\x07\xcf\x4a\xfa\xa8\xe0\x85\x21\xb6\xbc\xd3\x34\x1c\x45\x18\xdc\xf2\x32\x0b\x8d\xa7\x15\xeb\x44\xbf\x30\x34\xb3\x90\x34\x73\x86\x66\x1f\x9f\x92\x40\x29\x25\x74\x88\xd5\x8e\x8f\xb7\xc7\x5b\x62\xd1\xad\x2d\xdb\x26\x62\xd1\xf1\xb6\xb6\x78\x2c\xda\xd2\xdc\x3a\x31\x41\x49\xcd\xba\xc6\x5d\xdd\xa7\x32\x67\xc6\xc6\xcf\x4e\xbc\x7c\xd9\x6f\x55\x71\x95\x80\xaa\x19\xcd\xbd\x52\xba\xb9\xfa\x70\x63\x4a\x35\x33\x59\xdf\xb1\x22\x5d\xc6\xd3\xce\x77\xfa\x1d\x13\xba\x54\xec\x98\x7b\xc5\x8e\xa1\x94\x2e\xda\xdf\xfd\x7c\xcf\x10\x63\x39\x9b\x1f\xe1\xba\xe2\x88\x3c\xef\x52\x1c\x6e\x0f\xb1\x2a\x7b\xc4\x2c\x74\xab\xa6\x71\xd8\xe2\x79\xaf\x37\xaa\x55\x45\x57\x73\xba\xe2\xf0\x0e\x5d\x4f\x89\x31\x6e\xf7\xab\xa6\x9e\xcb\x18\xf6\x80\xc3\x47\x1d\xd7\x32\x68\x9b\x96\xd3\xe9\x19\x07\x84\x6a\x1a\xae\x6d\x88\x2d\x75\xf3\x1f\xca\x3a\xc2\x34\xec\xa3\xdc\xb2\x85\x69\x50\x4a\xaf\x2d\x5e\xb9\xba\x7e\x43\xac\xb1\x75\xc7\x73\x5d\x93\x4b\xaa\x58\x35\x5d\x46\x57\xf4\xe7\x85\x2d\xd2\x3a\xef\x2b\x08\xcd\x19\x39\xa6\xd8\x2a\x37\x34\x61\x0c\x0f\x0a\x8d\x1b\x8e\x38\x2d\xb8\x45\xab\x31\x46\x7b\x0d\x25\xc3\x27\x6b\x6a\xeb\xaa\xc3\x91\xf0\xff\x4a\xe5\x22\xac\x9e\x0c\xe4\xd2\xe2\xa5\x9c\x70\xce\xf8\x75\x44\xc3\x6b\x28\xbb\x41\x4e\x68\x8a\xc3\x0f\x9a\x9a\x5b\xa2\xe6\xa5\x84\xa3\xe1\xf5\x84\x1c\x77\xed\x9d\x16\x57\x1c\xae\x4d\x56\x57\xb1\x25\x1b\x37\x85\x69\xaf\x2d\xc6\x38\x53\x08\xf5\x2c\x0d\x5b\x28\xed\x7d\x51\x18\x1a\xb3\xa9\x6f\x69\x6a\xa6\xe1\x3e\x5d\x49\x73\x9d\x69\x94\x78\xa6\xb6\x76\x1a\xee\xcf\xfb\x6d\x65\x3d\xd2\xb8\x73\x19\x0d\x0f\xa8\x66\x26\xc3\x0d\xc7\xa6\xc4\xaf\xb6\x23\xdc\x49\xd8\x2d\xf2\x82\x5b\xf1\x01\xc5\x76\x0e\x65\xb9\xf1\xf0\x93\xf6\x11\x72\xcc\x4d\xe9\xd0\x34\xae\xd5\x27\x36\xfa\x23\xee\xb5\xbe\x3e\x11\x97\xf3\xc2\x0d\x48\x75\x10\x83\xdd\x70\x04\x06\x41\x05\x03\x0a\xf0\x06\xbc\x09\xe7\xe1\x02\x5c\x85\xf7\xe1\x3a\x7c\x08\x9f\xc0\xe7\x70\x0b\x6e\xc3\x57\x70\x07\xee\xc3\xf7\xf0\x23\xfc\x0c\xbf\xc0\xaf\xf0\x1b\xfc\x89\x04\x29\x56\xe2\x22\xac\xc3\x35\x58\x8f\x6b\x31\x8e\xdb\x70\x37\x26\xb0\x03\x93\xd8\x83\x87\xf1\x08\xa6\xb0\x17\x4f\xa2\x8a\x1c\x4f\xe3\x30\x66\x71\x14\xc7\x70\x1c\xcf\xe2\xeb\x78\x1e\x2f\xe0\x45\xbc\x8c\x57\xf0\x6d\x7c\x07\xaf\xe3\x0d\xfc\x08\x6f\xe2\xa7\xf8\x25\x7e\x8d\xf7\xfc\xef\x0b\x15\x15\x7e\x60\xba\xc0\xf1\x7e\x59\xdd\xca\x09\x1d\x3a\xf6\x48\xdd\xee\xd9\xbb\x2f\xf9\x64\x74\xfb\xed\x62\x77\x6c\x96\x2e\x5b\xbe\x62\xe5\xff\xd7\x6e\xda\xd2\xdc\xbe\xab\xe3\xc1\xa0\xce\x18\xc5\xa9\x6a\xf2\x44\xe4\xab\xc4\x53\x4f\x51\x1d\xde\x58\x4e\x97\x63\x4d\x6d\x5d\x38\xb2\x8a\xae\x2e\x25\xeb\x3e\x61\x68\x7c\x94\xb8\xf3\x80\x2d\x9c\x0c\xd7\xd6\xd5\x44\x9f\x89\x44\x98\x2b\x23\xe2\xbd\xae\x5b\x1f\x89\xb0\x10\xbb\x41\x88\x57\x16\xdd\x1c\x69\xa0\x4c\x21\x6c\x9e\x5f\x74\x9c\x36\x11\xa6\x51\x36\xdf\x4f\xdd\x4a\xdb\x28\xb3\x29\xab\xf0\x53\xb7\xd3\x9d\x84\xf5\x50\xb6\xc0\x2b\x6a\xf7\x2a\x4a\x19\x50\xea\xbd\x24\xd7\x47\x28\x43\x42\x4b\x08\xb1\x8c\x0c\xdf\x83\x6b\xf0\x31\x7c\x06\xb7\xe1\x0e\x7c\x03\xdf\xc1\x0f\xf0\x13\xfc\x8e\x88\x0b\xb1\x1a\x6b\xb0\x16\x23\xb8\x0a\x57\xe3\x06\xdc\x84\x9b\x31\x86\x0d\xd8\x8a\xed\xb8\x1d\x77\xe0\x4e\xdc\x83\x7b\x71\x3f\x76\x63\x0f\xf6\x62\x1f\xf6\xe3\x00\x0e\xa2\x8a\x9a\x27\x44\x81\x16\xda\x98\xc3\x3c\x8e\xe2\x2b\xf8\x2a\xbe\xe6\x09\xf2\x22\xbe\x85\x97\xf0\x2a\xbe\x3b\x43\x7e\xfb\x67\xc8\xef\x83\xd2\xf2\xcb\x98\x5d\x5d\x5a\xce\x51\x01\xee\xf2\xf3\x87\x6a\xff\x28\xe7\xa9\x3d\xf0\x3c\x79\xf3\xee\xb3\xa5\x3d\xb3\x23\x53\x17\x6d\x6f\xef\x57\xc2\x33\x9f\xb2\x0c\xdd\x34\x86\xe5\x3e\x76\x09\x64\x41\x87\x1c\x0c\x7b\xde\x0d\x60\x83\x0a\x16\x08\xc8\x82\x03\xf6\x1c\x8b\x7c\xcd\x4d\x6d\xb1\x68\x53\x6b\xf3\xbf\x8e\x7c\x65\x1b\x3d\x3d\xfe\x79\x28\xef\x1f\x44\xc1\x20\x0a\xce\xe5\x28\x38\x9b\x7a\x83\x58\x18\xc4\xc2\xc7\x1e\x0b\xcb\x8a\x70\x4a\x44\x14\x07\x5b\x56\x74\xcf\xee\xaf\xfd\x23\xff\xe9\xd1\x71\xf6\x25\x7d\x46\x8c\x0c\xf0\x74\x63\x9e\x4f\xd1\x4a\x00\xd8\x53\xfa\xfe\x3f\x40\x80\x00\x4f\x31\xb0\xa2\x2b\xd5\x95\x2c\xb3\xe8\x87\xe4\x45\xc0\xa9\x62\x86\x59\x2e\x02\x42\xfe\x1f\x86\x36\x4a\x5b\x1c\x1e\xe6\x9b\x1b\x97\x01\xc1\x9e\x27\x38\xff\xff\xc7\xcf\xff\x7f\x05\x00\x00\xff\xff\xc7\x9a\x63\x7f\x04\x28\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 10244, mode: os.FileMode(420), modTime: time.Unix(1531265192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGroovyJenkins_securityGroovy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x8e\xd3\x30\x10\xbd\xfb\x2b\x4c\x39\x34\x41\x6c\x4e\x1c\xe9\x4a\x51\x59\x44\x57\xd5\x52\x6d\xb5\x27\xc4\xc1\x38\xd3\xac\x17\xc7\x53\x8d\xc7\x2d\xa5\xca\xbf\xa3\x38\xc9\x36\xa5\x29\x1c\x67\xfc\xde\xf3\xf3\xf3\x7b\xfb\xa6\x24\xc4\xdd\x41\x08\x53\x6d\x91\x58\xbe\x80\xfb\x69\x9c\xcf\x2a\x2c\xc0\x66\xef\xfa\xf5\x73\x28\x3c\xba\xcc\x83\x0e\x64\xf8\x70\x3a\x38\xc7\xdf\xb7\xd3\x12\xb5\x62\x83\x6e\x8e\x6e\x63\xca\x40\x71\xb8\x26\xa5\x3d\x6d\xb2\x4f\xb0\x51\xc1\xf2\x9c\x42\xf5\x63\xe1\x7d\x00\x12\xa2\x80\x8d\x34\xce\xb3\x72\x1a\xe4\x4c\x76\xda\x59\x09\xbc\xe8\xb6\x49\x2a\xc4\x96\x8c\x63\xeb\xe4\xe4\xe6\xe6\x56\x6a\x02\xc5\xc6\x95\xd2\xa2\x56\x56\x06\x0f\x24\xa7\xc7\x63\xf6\xe4\x81\xea\x7a\x3a\x69\x45\x5b\x07\x8f\xa0\x6c\x25\x67\xd2\xc1\x5e\x7e\x89\x9b\x15\x99\x9d\x62\x58\x77\xce\x22\x20\xd9\x28\xeb\x21\x15\x03\x4e\x16\x6f\x81\x5c\x6b\x0c\x8e\x93\x81\xfe\xfb\x78\xd9\x4a\x79\xbf\x47\x2a\xea\x7a\x9a\x8a\xfe\x01\x99\x07\x3e\x17\x1e\x28\xa6\xad\x2f\xcf\xa4\x18\xca\x43\x67\xea\x73\xb0\x76\x8e\x8e\x09\xed\x57\xa7\x61\x89\x65\x09\xc5\xc2\xe5\x81\x9f\x91\xcc\xef\x18\xea\xba\xa3\x24\xa9\xe8\xd9\xcd\x4d\xb9\xb5\xb8\xcf\x1d\xba\x43\x85\xc1\x3f\x82\x2a\xfa\x77\x0c\xfd\x8c\x2b\xf5\x3a\x43\xac\xda\x5d\x66\xed\x81\x63\xd4\x5d\x03\x64\x20\xdb\x66\x4d\xb6\x8d\xfa\xe5\xbc\x0c\xa7\x2f\x1c\xad\x47\xf3\xaf\x49\xfa\x37\xa9\xb1\xf9\x44\x36\x39\x09\x8f\x42\xf2\xa2\x32\x2e\x2f\x0a\x02\xef\x23\x36\x2e\xee\x2a\x65\xae\x50\xfe\xf5\xa0\xb0\x95\x45\x5b\x47\xa9\x9b\x3e\x7a\x69\x62\x23\x27\xa2\xaf\xe0\x30\xc4\x41\x65\x93\xe6\xd7\x2e\x9b\x9c\x30\x05\x48\xd3\x11\xf6\x7f\x5c\xdc\x3f\x2c\x57\x13\xb1\x06\xfe\xb8\x66\x32\xae\xbc\x95\xaa\x04\xc7\x2b\x42\x46\x8d\xd6\x2f\x8d\x67\x39\x93\xdf\xa6\x0d\xf0\xc3\x8d\x46\xe7\x40\x73\xd3\xc2\x95\x71\xe5\xf4\xfb\xa8\xdf\xfc\x4c\x22\xb9\x54\x1c\x33\x0a\xbc\xb6\x6a\x07\x2d\x17\x89\x93\xe3\x51\x66\xaf\x93\xac\xeb\x54\x8c\xb2\x1e\x42\x75\xf7\x0b\x74\x60\x24\x1f\x39\xaf\x53\xe4\x5c\x4b\xe4\x4f\x00\x00\x00\xff\xff\xf8\xae\x1d\xdc\x96\x04\x00\x00")

func initGroovyJenkins_securityGroovyBytes() ([]byte, error) {
	return bindataRead(
		_initGroovyJenkins_securityGroovy,
		"init-groovy/jenkins_security.groovy",
	)
}

func initGroovyJenkins_securityGroovy() (*asset, error) {
	bytes, err := initGroovyJenkins_securityGroovyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init-groovy/jenkins_security.groovy", size: 1174, mode: os.FileMode(420), modTime: time.Unix(1531168716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _java_opts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\x0c\x73\x8c\xf7\x0f\x08\x09\x06\x04\x00\x00\xff\xff\xdf\xfc\xbe\xf5\x09\x00\x00\x00")

func java_optsBytes() ([]byte, error) {
	return bindataRead(
		_java_opts,
		"java_opts",
	)
}

func java_opts() (*asset, error) {
	bytes, err := java_optsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "java_opts", size: 9, mode: os.FileMode(420), modTime: time.Unix(1530830821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _java_optsValues = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x8d\xc8\x2d\x36\x34\x30\x32\xc9\x55\xd0\x8d\xc8\xad\x80\xb2\x5c\xb2\x52\xf3\xb2\x33\xf3\x8a\xf5\x32\xf3\x8a\x4b\x12\x73\x72\xf4\x8a\x4a\xf3\x82\x53\x4b\x4a\x0b\xc2\x33\xab\x12\x8b\x52\x6c\xd3\x12\x73\x8a\x53\x91\x94\x39\xfb\x78\xea\xa5\x64\x16\x27\x26\xe5\xa4\xa6\xd8\x96\x14\x95\xa6\x02\x02\x00\x00\xff\xff\xaf\x5b\x02\x90\x56\x00\x00\x00")

func java_optsValuesBytes() ([]byte, error) {
	return bindataRead(
		_java_optsValues,
		"java_opts.values",
	)
}

func java_optsValues() (*asset, error) {
	bytes, err := java_optsValuesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "java_opts.values", size: 86, mode: os.FileMode(420), modTime: time.Unix(1530830837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_opts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\xf5\xf3\xf6\xf4\x0b\x8e\xf7\x0f\x08\x09\x06\x04\x00\x00\xff\xff\xfe\x8d\xeb\x4b\x0c\x00\x00\x00")

func jenkins_optsBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_opts,
		"jenkins_opts",
	)
}

func jenkins_opts() (*asset, error) {
	bytes, err := jenkins_optsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_opts", size: 12, mode: os.FileMode(420), modTime: time.Unix(1530830950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_optsValues = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x4d\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\x0e\x4a\x4d\xcc\xc9\xd5\x2b\x48\x2c\x2e\x2e\x4f\xd1\x53\xd1\x70\x74\xf1\xf5\xf4\x8b\x0f\x0d\x76\x0d\xd2\xb4\x85\xf1\x02\x1c\x83\x83\xc3\xfd\x83\x5c\x34\x15\x30\xf4\x15\xe5\xe7\xa4\x16\xe3\xd0\x06\xe6\x01\x02\x00\x00\xff\xff\xf2\xf1\x7f\x85\x6a\x00\x00\x00")

func jenkins_optsValuesBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_optsValues,
		"jenkins_opts.values",
	)
}

func jenkins_optsValues() (*asset, error) {
	bytes, err := jenkins_optsValuesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_opts.values", size: 106, mode: os.FileMode(420), modTime: time.Unix(1530830950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginScriptsInstall_pluginSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x4f\x1b\x3d\x10\x3d\xe3\x5f\x31\x18\xa4\x80\xc4\xc6\xe8\xfb\x6e\x21\xa4\x45\x11\xa0\xb4\xb4\xa0\x10\x15\xa4\xaa\x07\xb3\x3b\xc9\xba\x6c\xec\xad\x3d\x0e\x41\x74\xff\x7b\x65\x7b\xa3\x50\x84\xda\xa6\x6a\x2e\xf1\xda\xe3\x37\x6f\xde\x1b\xcf\xce\xb6\xf0\xce\x8a\x3b\xa5\x05\xea\x05\xdc\x49\x57\xb2\xda\x2a\x4d\xa8\x17\x8c\xed\xc0\x8d\x54\x04\x53\x63\xe1\x1d\xea\x7b\xa5\x1d\x90\x81\xca\xc8\x82\x3d\x94\xaa\x42\xd8\x86\xdc\xdb\x0a\x32\x07\x59\x56\xa2\x2c\x20\xcb\x2c\x7e\xf3\xe8\x08\xce\x4f\x27\xf0\xf4\x04\xdd\x93\x5a\x41\xd3\xc0\x77\x98\x59\xac\x81\xff\x77\x78\x08\x97\xef\x39\x0c\x40\x14\xb8\x10\xda\x57\xd5\x11\x2b\x0c\xdb\xc2\xbc\x34\xc0\x87\x17\xa3\x5e\x4c\xaa\xf4\x2c\xe6\xfd\x9a\xf2\x76\xbb\x9c\x6d\xb9\x0a\xb1\x86\xff\x59\x61\x34\x06\x72\x33\x24\x18\x5e\x8f\xcf\xa0\xb6\x86\x30\x27\x65\x34\x90\xb9\x47\xcd\x12\xd8\x39\x52\xc4\x79\x35\x86\xb3\xdc\xfa\xf9\xdd\x24\xac\x8f\x77\xf7\x62\x1d\x9d\x35\xe1\x78\x38\x72\xce\xa3\x15\xb2\x56\x62\x39\xaf\xde\x2c\x6b\x49\xe5\x71\x6e\x74\x2e\x69\x4f\x88\x18\x32\x4e\xe5\x9e\x29\xac\x8a\x03\xde\xe3\x07\xed\xfe\x7e\x67\x3f\x50\x94\xce\xf9\x39\x3a\xc8\x2b\x75\xe2\xa9\x84\xb9\xf1\x9a\xb0\x08\x32\x8a\xb6\x34\x21\x3d\x95\xa2\x0d\x68\x99\x8f\xb4\x23\x59\x55\x81\x7c\x5d\xf9\x99\xd2\x51\xca\xab\xb8\x1c\x15\xd0\x34\x6f\xd7\xdf\x9f\xd0\xba\x50\x55\xd3\x70\xc6\x92\x1d\xb7\x70\x75\x79\x3d\x81\xac\x80\x4e\xbf\xcd\x32\xe8\xab\x84\xd9\x02\x1e\xf3\x3f\x42\x04\x31\xe8\xaf\x88\x0e\x3a\xad\xcb\x68\xa1\x33\x34\xa1\x47\x28\x9b\x3c\xd6\xd8\x03\xc2\x25\x05\x89\x9e\x45\xf0\xdb\x2c\xe8\x9e\x45\x81\x7b\xb0\xbb\x56\x9b\x3f\xeb\x8b\x44\xe6\x83\xd4\x72\x86\x56\xb4\x14\x3f\x62\x8e\xce\x49\xfb\x98\xe8\xb8\x97\x65\x6d\x96\x42\x38\x39\xc5\x31\x3a\x92\x96\x82\x25\x0f\x56\x11\xae\x64\xcd\x8d\x9e\xaa\x59\xb0\x63\xaa\x2a\x64\xb9\x24\x18\x08\x9a\xd7\xe2\x85\x3a\xdd\xd7\xd4\xe9\xb6\xb7\xfb\xfd\xd3\xcb\x0b\xb6\x8e\x18\xa6\xed\xa6\x61\x61\xbf\xb5\xf4\x26\xf4\x5f\xf4\x7d\x43\xf8\x1e\x8f\xb4\x36\xbd\xc6\x98\x9a\xc2\xe7\xf0\x34\x37\xae\xe7\xcb\x11\x50\x89\x9a\x31\x00\x80\x5f\xcc\x80\x70\xfc\x4f\xe7\x40\x00\x2c\x4c\xfc\x0b\xbf\xdf\x8f\x84\x55\xe4\x6a\x32\x24\x80\x30\x1d\x12\x75\xeb\xf5\xcf\x4e\xb3\x35\xee\xd8\x6b\x1d\x20\xd3\x81\xb7\x32\xce\x86\x90\x60\xb3\x27\x17\x10\x53\xf5\x05\x70\x97\x5b\x55\x53\x98\x27\x7f\x61\xd9\x3e\x87\x6c\xb1\x69\x7b\xa7\x8c\x13\x5c\x12\x9b\xaa\x1f\x01\x00\x00\xff\xff\xbf\x89\x3a\xc2\xcf\x05\x00\x00")

func pluginScriptsInstall_pluginShBytes() ([]byte, error) {
	return bindataRead(
		_pluginScriptsInstall_pluginSh,
		"plugin-scripts/install_plugin.sh",
	)
}

func pluginScriptsInstall_pluginSh() (*asset, error) {
	bytes, err := pluginScriptsInstall_pluginShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugin-scripts/install_plugin.sh", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1531419307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"init-groovy/jenkins_security.groovy": initGroovyJenkins_securityGroovy,
	"java_opts": java_opts,
	"java_opts.values": java_optsValues,
	"jenkins_opts": jenkins_opts,
	"jenkins_opts.values": jenkins_optsValues,
	"plugin-scripts/install_plugin.sh": pluginScriptsInstall_pluginSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"init-groovy": &bintree{nil, map[string]*bintree{
		"jenkins_security.groovy": &bintree{initGroovyJenkins_securityGroovy, map[string]*bintree{}},
	}},
	"java_opts": &bintree{java_opts, map[string]*bintree{}},
	"java_opts.values": &bintree{java_optsValues, map[string]*bintree{}},
	"jenkins_opts": &bintree{jenkins_opts, map[string]*bintree{}},
	"jenkins_opts.values": &bintree{jenkins_optsValues, map[string]*bintree{}},
	"plugin-scripts": &bintree{nil, map[string]*bintree{
		"install_plugin.sh": &bintree{pluginScriptsInstall_pluginSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

