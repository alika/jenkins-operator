// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// pkg/configdata/environment/jenkins-jvm-environment
// pkg/configdata/environment/required-plugins
// pkg/configdata/init-groovy/0-jenkins-config.groovy
// pkg/configdata/jobdsl/seed-job-dsl
package configdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _environmentJenkinsJvmEnvironment = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\x0c\x73\x8c\xf7\x0f\x08\x09\xb6\xd2\x8d\xc8\x2d\x36\x34\x30\x32\xc9\x55\xd0\x8d\xc8\xad\x80\xb2\x5c\xb2\x52\xf3\xb2\x33\xf3\x8a\xf5\x32\xf3\x8a\x4b\x12\x73\x72\xf4\x8a\x4a\xf3\x82\x53\x4b\x4a\x0b\xc2\x33\xab\x12\x8b\x52\x6c\xd3\x12\x73\x8a\x53\x91\x94\x39\xfb\x78\xea\xa5\x64\x16\x27\x26\xe5\xa4\xa6\xd8\x96\x14\x95\xa6\x72\x79\xb9\xfa\x79\x7b\xfa\x05\x43\xed\xd0\x4d\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\x0e\x4a\x4d\xcc\xc9\xd5\x2b\x48\x2c\x2e\x2e\x4f\xd1\x53\xd1\x70\x74\xf1\xf5\xf4\x8b\x0f\x0d\x76\x0d\xd2\xb4\x85\xf1\x02\x1c\x83\x83\xc3\xfd\x83\x5c\x34\x15\x30\xf4\x15\xe5\xe7\xa4\x16\xe3\xd0\x06\xe6\x01\x02\x00\x00\xff\xff\xca\x81\xb8\xf8\xd8\x00\x00\x00")

func environmentJenkinsJvmEnvironmentBytes() ([]byte, error) {
	return bindataRead(
		_environmentJenkinsJvmEnvironment,
		"environment/jenkins-jvm-environment",
	)
}

func environmentJenkinsJvmEnvironment() (*asset, error) {
	bytes, err := environmentJenkinsJvmEnvironmentBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "environment/jenkins-jvm-environment", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _environmentRequiredPlugins = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x42\x31\x0c\x04\xd0\xbd\x77\xc9\x05\xbc\x4d\xda\x8e\x35\xbf\xa1\xf9\xa4\xa9\x1f\x3c\xbd\xb8\x08\x08\x2e\x93\xc7\x0c\x53\x1d\x0d\x33\x84\x75\xdd\x95\x03\x2b\x6e\x65\x8b\x36\x2a\x6a\x75\xc0\xe9\xd4\xdd\x65\xa6\x1d\x56\xa8\x2d\xcd\x93\x77\x3c\xcd\xe5\x0d\x3a\xdd\x0e\xd4\x48\xb8\xcc\xc7\x43\xed\x22\xee\xdd\xd1\x39\xcc\x93\xc6\x2e\xf0\x89\xc0\xfa\xff\xd0\xcf\x9c\x6f\xe5\x4b\x1a\x32\xf8\x09\x00\x00\xff\xff\xf6\x96\x03\xe4\xaa\x00\x00\x00")

func environmentRequiredPluginsBytes() ([]byte, error) {
	return bindataRead(
		_environmentRequiredPlugins,
		"environment/required-plugins",
	)
}

func environmentRequiredPlugins() (*asset, error) {
	bytes, err := environmentRequiredPluginsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "environment/required-plugins", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGroovy0JenkinsConfigGroovy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xb0\xee\xc1\x52\x11\x33\x40\xd1\x53\xdb\x2c\x60\x64\xb7\x6d\x52\xef\xd6\x8d\xbb\xe8\x61\xb1\x28\x68\x6a\x2c\xd3\xa5\x38\xc6\xcc\xd0\xd9\x34\xf0\x7f\x2f\x44\xc9\xb6\x94\x38\x41\x7b\x48\x00\x52\x8f\x6f\x3e\xde\xbc\xf1\xd7\x5f\x55\x84\xb8\x7b\xc8\x32\x57\x6f\x91\x44\x6d\x20\xfc\xed\x02\xeb\x1a\x4b\xf0\xfa\x9b\xc3\xf5\x3a\x96\x8c\x41\x33\xd8\x48\x4e\x1e\x4e\x1f\x86\xf8\xdb\xf6\x34\x43\x6b\xc4\x61\xb8\xc6\xb0\x72\x55\xa4\x74\x78\x89\xca\x32\xad\xf4\x5b\x58\x99\xe8\xe5\x9a\x62\xbd\xbc\x61\x8e\x40\x4f\x03\x1c\xf1\xfc\x6d\x7d\x0a\x8f\x54\xe9\x0e\x61\x9d\xde\xfa\x58\x35\x58\x13\x65\x8d\xe4\xfe\x81\x2d\xe1\x06\xac\xfc\x6f\x3c\x0b\x19\x81\xea\x4c\x9d\xc7\x34\x7e\x8f\x10\xe1\x46\xa0\x9e\x46\x59\x43\x10\x67\x8d\x20\x9d\xad\x78\x63\x76\x66\x8b\xcc\xa0\x37\xb8\x2c\xd9\xeb\xe6\xef\x2d\xfb\x85\x25\xb7\x95\x19\x9a\xb2\x57\xee\x53\x6c\x9b\xe3\xa1\xb3\xb7\xb8\x7c\x6f\x82\xa9\xa0\x86\x20\x59\x56\xc2\x4a\xb9\xc0\x62\x82\x05\x75\xa5\x3a\x90\xae\x40\x6e\xba\xdb\xbc\xc8\xb6\xe4\x82\xf8\xa0\x46\x93\xc9\x1b\x65\x09\x8c\xb8\x50\x29\x8f\xd6\x78\x15\x19\x48\x8d\x1f\x1f\xf5\x47\x06\xda\xef\xc7\xa3\x96\xb3\xd5\xe8\x0e\x8c\xaf\xd5\x95\x0a\x70\xaf\x7e\x49\x37\x73\x72\x3b\x23\xb0\xe8\x9a\x90\x00\xf9\xca\x78\x86\x22\xeb\xbd\xd1\x29\x0a\x4c\xad\xc5\x18\x24\xef\xf1\x5f\xa4\x60\x73\xc3\x7c\x8f\x54\xee\xf7\xe3\x22\x3b\xe4\xaf\x19\x64\x48\xdc\x63\x2c\xda\xbc\x0e\xba\x74\x49\xfd\x14\xbd\xbf\xc6\x20\x84\xfe\xb7\x60\x61\x86\x55\x05\xe5\x4d\x98\x76\x72\x26\x11\x16\xdd\x93\xbc\xc8\x8e\xaa\x32\xc8\xd4\x7b\xbc\x9f\x06\x0c\x0f\x35\x46\xbe\x03\x53\x1e\xea\xe8\xe7\x73\x9e\xe9\xc0\x53\x64\xc3\xde\x32\x48\x6a\x6d\x37\x2b\x2a\x92\x6f\x7b\x4b\xbe\x6d\xed\x66\x68\x8f\x93\x62\x67\x0d\xd3\xc8\x98\x17\x4f\x1f\x35\x69\x7d\x24\x9f\x9f\x88\xcf\x42\xa6\x65\xed\xc2\xb4\x2c\x09\x98\x13\x36\x5d\xbc\xab\x8d\x7b\xe1\x89\xd9\x35\xb3\x72\xbe\xa0\xb8\x55\x65\x6b\x50\x65\x1b\x87\xb2\x72\xc9\xa3\xa3\x41\xb3\x7a\xe6\xcd\x1b\x75\x9e\x7b\x3a\x17\x8a\x50\xbc\x12\xe5\xf6\xc3\x6c\x3e\xca\x16\x20\x3f\x2e\x84\x5c\xa8\xde\x28\x53\x41\x90\x39\xa1\xa0\x45\xcf\x33\xc7\xa2\xae\xd4\xa7\x71\x03\xfc\x6e\x62\x31\x04\xb0\xd2\x4c\xd5\xdc\x85\x6a\xfc\x79\x28\xde\xe0\x69\xfe\x9c\xe9\xc9\xec\x79\xb3\x83\xf6\x0d\x92\xe4\x8f\x8f\x4a\x1f\x4f\x6a\xbf\x1f\x82\x3f\xc4\xfa\xdd\x17\xb0\x51\x90\x38\x41\x8f\xa7\x04\x1d\x16\x08\xc1\x2c\x3d\xa8\xc4\xa6\x04\x55\x6d\x58\x80\xd4\x61\x95\x28\x8e\x4b\x7e\x60\x81\xba\xd7\x4f\x17\x9a\x45\x84\x34\xf0\x72\xd2\xf0\xcf\xb5\x13\xf0\x8e\xe5\x2e\x7a\xd0\xd6\x1b\xe6\xa2\x49\xe9\x7d\x62\xfd\xd5\x79\xbf\xb8\x77\x62\xd7\xdd\x3c\xff\xf0\x72\xb7\xbb\x6d\xa7\x4c\x7f\xca\x47\xd9\x7f\xd8\x6c\xed\x68\x36\xff\x07\x18\xce\x0b\x6d\xca\x32\xa9\xff\xb3\xc7\xa5\xf1\xe7\xb9\x12\xe0\x0f\x72\x55\x05\x8d\xca\xcd\x6e\xe0\x17\x4c\xfb\xda\xb4\x30\x40\xa9\x36\xb8\x1c\x65\x69\xdc\x86\x0b\x35\xc5\x38\xb7\x35\xf3\x45\xea\xb5\xc6\x28\x17\xea\xd3\xf7\x9f\x2f\xda\x55\xe2\x3c\xe4\x63\x3d\x2e\x8a\x42\x53\x0c\x2d\x53\x7e\xfa\x72\xb9\x33\x74\xd9\x99\xe6\xaf\x35\xd6\x70\xe9\x82\x13\xdd\xfe\x7a\xea\xf2\xb2\xc9\x65\xb2\xc1\xe5\xa4\x64\x3f\x2e\xb4\xc0\x17\x79\x96\xb9\xd9\x35\x89\x1f\x24\xee\x9b\xa7\x33\x5f\x96\xfd\x1b\x00\x00\xff\xff\x83\x27\xe3\xa0\x90\x07\x00\x00")

func initGroovy0JenkinsConfigGroovyBytes() ([]byte, error) {
	return bindataRead(
		_initGroovy0JenkinsConfigGroovy,
		"init-groovy/0-jenkins-config.groovy",
	)
}

func initGroovy0JenkinsConfigGroovy() (*asset, error) {
	bytes, err := initGroovy0JenkinsConfigGroovyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init-groovy/0-jenkins-config.groovy", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jobdslSeedJobDsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xdd\x4e\xc3\x30\x0c\x85\xef\xf7\x14\xbe\x73\x86\x36\xde\x61\x80\x40\x9a\x2a\x06\xda\x13\x24\xed\x99\x96\x2e\x4b\xaa\xd8\x03\x26\xd4\x77\x47\x6d\xe9\x4f\x6e\xac\xf8\x3b\x76\xbe\x9c\x32\x70\xd4\x7b\xc0\x3e\x39\xc3\x65\x86\x55\x6c\x6b\xc4\x8b\x8f\xb2\xad\x93\x13\x5e\xd3\xef\x8a\x88\xc8\x85\x54\x5e\x0e\xd1\xf0\xc3\xd4\x9a\xda\x05\xbe\x10\x0c\xbf\x15\x87\xa7\x5d\xc1\xeb\x09\x4a\x69\xe3\xe7\x0d\x37\xbc\xa6\x6c\x78\x57\x8c\xac\x5d\xf5\xa5\x82\x94\xd9\x37\xea\x53\x34\xbc\x4f\xee\xe5\x58\x50\x9d\xdc\x86\xf4\x6c\x95\x06\x19\xa1\xa4\x67\x64\x1a\x5c\x86\x31\x2f\x4d\xb0\xf7\x77\x7b\x85\xe1\xe7\x3e\x45\x11\xdf\x63\xa4\xcf\x34\x36\xdb\x2b\x14\x59\x16\xae\x27\x1f\xf0\xd1\x01\xc3\x75\x72\x8f\x95\x04\xde\xd0\xf8\x70\x07\x67\xbd\xbe\x8a\xa2\x59\xce\x57\x12\x16\xb7\xee\xe0\x47\x91\xa3\x0d\xf3\xc2\xf9\xf3\xed\xff\xae\xf6\x2f\x00\x00\xff\xff\x04\xeb\x1c\x98\x64\x01\x00\x00")

func jobdslSeedJobDslBytes() ([]byte, error) {
	return bindataRead(
		_jobdslSeedJobDsl,
		"jobdsl/seed-job-dsl",
	)
}

func jobdslSeedJobDsl() (*asset, error) {
	bytes, err := jobdslSeedJobDslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jobdsl/seed-job-dsl", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"environment/jenkins-jvm-environment": environmentJenkinsJvmEnvironment,
	"environment/required-plugins":        environmentRequiredPlugins,
	"init-groovy/0-jenkins-config.groovy": initGroovy0JenkinsConfigGroovy,
	"jobdsl/seed-job-dsl":                 jobdslSeedJobDsl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"environment": &bintree{nil, map[string]*bintree{
		"jenkins-jvm-environment": &bintree{environmentJenkinsJvmEnvironment, map[string]*bintree{}},
		"required-plugins":        &bintree{environmentRequiredPlugins, map[string]*bintree{}},
	}},
	"init-groovy": &bintree{nil, map[string]*bintree{
		"0-jenkins-config.groovy": &bintree{initGroovy0JenkinsConfigGroovy, map[string]*bintree{}},
	}},
	"jobdsl": &bintree{nil, map[string]*bintree{
		"seed-job-dsl": &bintree{jobdslSeedJobDsl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
